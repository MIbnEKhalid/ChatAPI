<!DOCTYPE html>
<html lang="en">

<head>
    <title>AI Chat Assistant | MBK Tech Studio</title>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover, user-scalable=no">
    <link rel="icon" type="image/x-icon" href="/Assets/Images/dgicon.svg">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.15/codemirror.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.15/theme/monokai.min.css">
    <link rel="stylesheet"
        href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/atom-one-dark.min.css">
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js"></script>
    <script src="/Assets/Scripts/logout.js"></script>
    <style>
        :root {
            --base-font-size: 16px;
            --primary-color: #2563eb;
            --secondary-color: #1d4ed8;
            --accent-color: #0891b2;
            --danger-color: #dc2626;
            --success-color: #16a34a;
            --warning-color: #ca8a04;
            --info-color: #0ea5e9;
            --main-border-color: #e5e7eb;
            --transition-duration: 0.2s;
            --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
            --shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);
            --shadow-lg: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
            --shadow-xl: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
            --border-radius: 8px;
            --border-radius-sm: 4px;
            --border-radius-lg: 12px;
            --border-radius-xl: 16px;
            --safe-area-inset-top: env(safe-area-inset-top);
            --safe-area-inset-bottom: env(safe-area-inset-bottom);
            --safe-area-inset-left: env(safe-area-inset-left);
            --safe-area-inset-right: env(safe-area-inset-right);
        }

        /* Modern Theme System */
        .dark-theme {
            --bg-color: #111827;
            --text-color: #f9fafb;
            --header-bg: #1f2937;
            --border-color: #374151;
            --input-bg: #374151;
            --user-message-bg: var(--primary-color);
            --ai-message-bg: #374151;
            --ai-message-text: #f9fafb;
            --user-profile-color: #ffffff;
            --card-bg: #1f2937;
            --hover-bg: #4b5563;
        }

        .light-theme {
            --bg-color: #ffffff;
            --text-color: #111827;
            --header-bg: #f9fafb;
            --border-color: #e5e7eb;
            --input-bg: #f3f4f6;
            --user-message-bg: var(--primary-color);
            --ai-message-bg: #ffffff;
            --ai-message-text: #111827;
            --user-profile-color: #111827;
            --card-bg: #ffffff;
            --hover-bg: #f3f4f6;
        }

        .sepia-theme {
            --bg-color: #fef7ed;
            --text-color: #92400e;
            --header-bg: #fffbeb;
            --border-color: #fed7aa;
            --input-bg: #fef3c7;
            --user-message-bg: #f59e0b;
            --ai-message-bg: #fef3c7;
            --ai-message-text: #92400e;
            --user-profile-color: #92400e;
            --card-bg: #fffbeb;
            --hover-bg: #fed7aa;
        }

        .contrast-theme {
            --bg-color: #000000;
            --text-color: #ffffff;
            --header-bg: #1a1a1a;
            --border-color: #404040;
            --input-bg: #2a2a2a;
            --user-message-bg: #ffffff;
            --ai-message-bg: #2a2a2a;
            --ai-message-text: #ffffff;
            --user-profile-color: #ffffff;
            --card-bg: #1a1a1a;
            --hover-bg: #404040;

            --user-message-bg: var(--card-bg);
        }

        /* Modern Reset and Base Styles */
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        html {
            scroll-behavior: smooth;
            height: 100%;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: var(--bg-color);
            color: var(--text-color);
            font-size: var(--base-font-size);
            line-height: 1.6;
            height: 100vh;
            height: 100dvh; /* Dynamic viewport height for mobile */
            overflow: hidden;
            display: flex;
            position: relative;
        }

        /* Remove glassmorphism - use solid backgrounds */
        .glass {
            background: var(--card-bg);
            border: 1px solid var(--border-color);
            border-radius: var(--border-radius);
        }

        /* Enhanced Button System */
        .btn {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: var(--border-radius);
            font-size: 0.875rem;
            font-weight: 500;
            text-decoration: none;
            cursor: pointer;
            transition: all var(--transition-duration) ease;
            position: relative;
            overflow: hidden;
            box-shadow: var(--shadow);
        }

        .btn:hover {
            transform: translateY(-1px);
            box-shadow: var(--shadow-lg);
        }

        .btn-primary {
            background: var(--primary-color);
            color: white;
        }

        .btn-primary:hover {
            background: var(--secondary-color);
        }

        .btn-secondary {
            background: var(--accent-color);
            color: white;
        }

        .btn-secondary:hover {
            background: #0e7490;
        }

        .btn-success {
            background: var(--success-color);
            color: white;
        }

        .btn-success:hover {
            background: #15803d;
        }

        .btn-danger {
            background: var(--danger-color);
            color: white;
        }

        .btn-danger:hover {
            background: #b91c1c;
        }

        .btn-ghost {
            background: transparent;
            color: var(--text-color);
            border: 2px solid var(--border-color);
        }

        .btn-ghost:hover {
            background: var(--primary-color);
            color: white;
            border-color: var(--primary-color);
        }

        .btn-icon {
            width: 3rem;
            height: 3rem;
            border-radius: 50%;
            padding: 0;
            background: var(--primary-color);
            color: white;
            box-shadow: var(--shadow);
        }

        .btn-icon:hover {
            background: var(--secondary-color);
            transform: scale(1.05);
        }

        /* Clean up - removing duplicate styles */

        /* Scroll Down Button */
        .scroll-down-btn {
            position: fixed;
            bottom: 8rem;
            right: 2rem;
            background: var(--primary-color);
            color: white;
            border: none;
            border-radius: 50%;
            width: 3rem;
            height: 3rem;
            display: none;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            box-shadow: var(--shadow);
            transition: all var(--transition-duration) ease;
            z-index: 50;
        }

        .scroll-down-btn:hover {
            background: var(--secondary-color);
            transform: scale(1.1);
        }

        /* Typing Indicator */
        .typing-indicator {
            display: flex;
            align-items: center;
            margin-bottom: 1rem;
            color: var(--text-color);
            font-style: italic;
            opacity: 0.7;
        }

        .typing-indicator .loading {
            display: inline-block;
            width: 0.5rem;
            height: 0.5rem;
            border-radius: 50%;
            background-color: var(--primary-color);
            animation: pulse 1.5s infinite ease-in-out;
            margin-left: 0.25rem;
        }

        @keyframes pulse {
            0%, 100% {
                opacity: 0.3;
                transform: scale(0.8);
            }
            50% {
                opacity: 1;
                transform: scale(1);
            }
        }

        /* Modern Chat List Container */
        .chat-list-container {
            width: 320px;
            background: var(--card-bg);
            border-right: 1px solid var(--border-color);
            display: flex;
            flex-direction: column;
            position: relative;
            z-index: 10;
            box-shadow: var(--shadow);
            transition: all var(--transition-duration) ease;
        }

        .chat-list-container.hidden {
            transform: translateX(-100%);
            opacity: 0;
            pointer-events: none;
        }

        @media (max-width: 768px) {
            /* Enable pull-to-refresh on mobile */
            html {
                height: 100%;
                overflow: auto;
            }

            body {
                height: 100vh;
                height: calc(var(--vh, 1vh) * 100); /* Fallback to custom vh */
                height: 100dvh; /* Dynamic viewport height */
                overflow: hidden;
                position: fixed;
                width: 100%;
                top: 0;
                left: 0;
            }

            .chat-list-container {
                position: fixed;
                left: 0;
                top: 0;
                bottom: 0;
                width: 85%;
                max-width: 320px;
                height: 100vh;
                height: calc(var(--vh, 1vh) * 100);
                height: 100dvh;
                z-index: 1000;
                border-radius: 0;
                transform: translateX(-100%);
                transition: transform var(--transition-duration) ease-in-out;
            }

            .chat-list-container:not(.hidden) {
                transform: translateX(0);
            }

            .chat-container {
                width: 100%;
                margin-left: 0;
                height: 100vh;
                height: calc(var(--vh, 1vh) * 100);
                height: 100dvh;
            }

            .chat-container.full {
                width: 100%;
            }

            .chat-header {
                padding: 1rem;
                padding-top: calc(1rem + var(--safe-area-inset-top, 0px));
                position: sticky;
                top: 0;
                z-index: 100;
            }

            .chat-header-title {
                font-size: 1.5rem;
            }

            .chat-content {
                height: calc(100vh - 80px); /* Adjust for header */
                height: calc(calc(var(--vh, 1vh) * 100) - 80px);
                height: calc(100dvh - 80px);
                display: flex;
                flex-direction: column;
            }

            .chat-messages {
                flex: 1;
                overflow-y: auto;
                padding: 0.25rem;
                -webkit-overflow-scrolling: touch;
                overscroll-behavior: auto; /* Enable pull-to-refresh */
            }

            .chat-input-container {
                padding: 1rem;
                background: var(--card-bg);
                border-top: 1px solid var(--border-color);
                position: sticky;
                bottom: 0;
                z-index: 50;
                /* Add safe area for notched devices */
                padding-bottom: calc(1rem + var(--safe-area-inset-bottom, 0px));
            }

            .chat-input {
                font-size: 1rem;
                padding: 0.75rem 1rem;
            }

            .message-bubble {
                max-width: 95%;
                padding: 1rem 1rem;
            }

            .btn {
                padding: 0.6rem 1rem;
                font-size: 0.875rem;
            }

            .scroll-down-btn {
                bottom: calc(8rem + var(--safe-area-inset-bottom, 0px));
                width: 3rem;
                height: 3rem;
            }

            /* Fix viewport issues */
            .settings-popup {
                height: 100vh;
                height: calc(var(--vh, 1vh) * 100);
                height: 100dvh;
                max-height: none;
            }
        }

        /* Modern Chat List Header */
        .chat-list-header {
            padding: 0.85rem;
            background: var(--primary-color);
            color: white;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: var(--shadow);
        }

        .chat-list-header h2 {
            font-size: 1.25rem;
            font-weight: 600;
            margin: 0;
        }

        .chat-list-header .header-actions {
            display: flex;
            gap: 0.5rem;
        }

        .chat-list-header .btn-icon {
            width: 2.5rem;
            height: 2.5rem;
            background: var(--secondary-color);
            border: 1px solid var(--border-color);
        }

        .chat-list-header .btn-icon:hover {
            background: var(--accent-color);
        }

        /* Enhanced Chat List */
        .chat-list {
            flex: 1;
            overflow-y: auto;
            padding: 1rem;
            list-style: none;
        }

        .chat-list::-webkit-scrollbar {
            width: 6px;
        }

        .chat-list::-webkit-scrollbar-track {
            background: var(--input-bg);
            border-radius: 3px;
        }

        .chat-list::-webkit-scrollbar-thumb {
            background: var(--primary-color);
            border-radius: 3px;
            opacity: 0.7;
        }

        .chat-list::-webkit-scrollbar-thumb:hover {
            opacity: 1;
        }

        .chat-list-section-header {
            font-size: 0.75rem;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            color: var(--primary-color);
            margin: 1.5rem 0 0.75rem 0;
            padding-left: 1rem;
            position: relative;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .chat-list-section-header::before {
            content: '';
            width: 4px;
            height: 16px;
            background: var(--primary-color);
            border-radius: 2px;
        }

        .chat-list-item {
            background: var(--input-bg);
            border: 1px solid var(--border-color);
            border-radius: var(--border-radius);
            padding: 1rem;
            margin-bottom: 0.5rem;
            cursor: pointer;
            display: flex;
            justify-content: space-between;
            align-items: center;
            transition: all var(--transition-duration) ease;
            position: relative;
        }

        .chat-list-item:hover {
            transform: translateY(-1px);
            box-shadow: var(--shadow-lg);
            border-color: var(--primary-color);
            background: var(--hover-bg);
        }

        .chat-list-item span {
            font-size: 0.875rem;
            font-weight: 500;
            color: var(--text-color);
            flex: 1;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            margin-right: 0.75rem;
        }

        .chat-list-item .delete-btn {
            opacity: 0;
            transition: all var(--transition-duration);
            background: var(--danger-color);
            color: white;
            border: none;
            border-radius: 50%;
            width: 2rem;
            height: 2rem;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            font-size: 0.75rem;
        }

        .chat-list-item:hover .delete-btn {
            opacity: 1;
            transform: scale(1.1);
        }

        .chat-list-item .delete-btn:hover {
            background: #b91c1c;
            transform: scale(1.1);
        }

        /* Remove duplicate chat list header styles */

        /* Modern Chat Container */
        .chat-container {
            display: flex;
            flex-direction: column;
            height: 100vh;
            height: 100dvh; /* Dynamic viewport height */
            flex: 1;
            background: var(--bg-color);
            transition: all var(--transition-duration) cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
        }

        .chat-container.full {
            width: 100%;
            max-width: 100%;
        }

        /* Modern Chat Header */
        .chat-header {
            background: var(--card-bg);
            border-bottom: 1px solid var(--border-color);
            padding: .75rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            position: sticky;
            top: 0;
            z-index: 100;
            box-shadow: var(--shadow);
        }

        .chat-header-title {
            font-size: 1.75rem;
            font-weight: 700;
            color: var(--primary-color);
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .chat-header-title img {
            font-size: 1.5rem;
            color: white;
            width: 2.5rem;
            height: 2.5rem;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .chat-header-actions {
            display: flex;
            gap: 0.75rem;
            align-items: center;
        }

        .chat-header button {
            background: var(--primary-color);
            color: white;
            border: none;
            border-radius: 50%;
            width: 3rem;
            height: 3rem;
            cursor: pointer;
            transition: all var(--transition-duration) ease;
            box-shadow: var(--shadow);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.125rem;
        }

        .chat-header button:hover {
            background: var(--secondary-color);
            transform: scale(1.05);
        }

        /* Modern Chat Content */
        .chat-content {
            flex: 1;
            display: flex;
            flex-direction: column;
            overflow: hidden;
            position: relative;
        }

        /* Enhanced Chat Messages */
        .chat-messages {
            flex: 1;
            overflow-y: auto;
            padding: 0.25rem;
            background: var(--bg-color);
            position: relative;
            -webkit-overflow-scrolling: touch;
            overscroll-behavior: contain;
        }

        .chat-messages::-webkit-scrollbar {
            width: 8px;
        }

        .chat-messages::-webkit-scrollbar-track {
            background: var(--input-bg);
            border-radius: 4px;
        }

        .chat-messages::-webkit-scrollbar-thumb {
            background: var(--primary-color);
            border-radius: 4px;
            border: 2px solid var(--input-bg);
        }

        .chat-messages::-webkit-scrollbar-thumb:hover {
            background: var(--secondary-color);
        }

        /* Modern Message System */
        .message {
            margin-bottom: 2rem;
            display: flex;
            opacity: 0;
            transform: translateY(20px);
            transition: all var(--transition-duration) ease;
            animation: slideIn 0.4s ease forwards;
        }

        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .message.show {
            opacity: 1;
            transform: translateY(0);
        }

        .user-message {
            justify-content: flex-end;
        }

        .ai-message {
            justify-content: flex-start;
        }

        .message-bubble {
            padding: 1rem 1rem;
            border-radius: var(--border-radius-xl);
            max-width: 80%;
            word-wrap: break-word;
            line-height: 1.7;
            box-shadow: var(--shadow);
            position: relative;
            transition: all var(--transition-duration) ease;
        }

        .message-bubble:hover {
            transform: translateY(-1px);
            box-shadow: var(--shadow-lg);
        }

        .user-message .message-bubble {
            background: var(--user-message-bg);
            color: white;
            border-bottom-right-radius: 8px;
            margin-left: auto;
        }

        .ai-message .message-bubble {
            background: var(--card-bg);
            color: var(--text-color);
            border: 1px solid var(--border-color);
            border-bottom-left-radius: 8px;
        }

        .response-time {
            font-size: 0.75rem;
            opacity: 0.7;
            margin-top: 0.75rem;
            text-align: right;
            font-style: italic;
        }

        /* Modern Chat Input */
        .chat-input-container {
            padding: 1rem;
            background: var(--card-bg);
            border-top: 1px solid var(--border-color);
            box-shadow: 0 -4px 6px rgba(0, 0, 0, 0.05);
            position: sticky;
            bottom: 0;
            z-index: 50;
        }

        .chat-input-form {
            display: flex;
            gap: 1rem;
            background: var(--input-bg);
            padding: 0.75rem;
            border-radius: var(--border-radius-xl);
            box-shadow: var(--shadow);
            transition: all var(--transition-duration) ease;
            border: 2px solid transparent;
        }

        .chat-input-form:focus-within {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
            transform: translateY(-1px);
        }

        .chat-input {
            flex: 1;
            padding: 1rem 1.5rem;
            border: none;
            border-radius: var(--border-radius-lg);
            background: transparent;
            color: var(--text-color);
            font-size: 1rem;
            font-family: inherit;
            resize: none;
            transition: all var(--transition-duration) ease;
            min-height: 2.5rem;
            max-height: 8rem;
        }

        .chat-input:focus {
            outline: none;
        }

        .chat-input::placeholder {
            color: var(--text-color);
            opacity: 0.6;
        }

        .send-button {
            padding: 1rem;
            background: var(--primary-color);
            color: white;
            border: none;
            border-radius: 50%;
            cursor: pointer;
            transition: all var(--transition-duration) ease;
            box-shadow: var(--shadow);
            width: 3.5rem;
            height: 3.5rem;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.125rem;
        }

        .send-button:hover {
            background: var(--secondary-color);
            transform: scale(1.05);
        }

        .send-button:active {
            transform: scale(0.95);
        }

        .send-button.disabled {
            background: var(--border-color);
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .send-button.disabled:hover {
            transform: none;
            box-shadow: none;
        }

        /* Remove duplicate send button styles */

        /* Messages */
        .message {
            margin-bottom: 1.5rem;
            display: flex;
            opacity: 0;
            transform: translateY(20px);
            transition: opacity var(--transition-duration) ease, transform var(--transition-duration) ease;
        }

        .message.show {
            opacity: 1;
            transform: translateY(0);
        }

        .user-message {
            justify-content: flex-end;
        }

        .ai-message {
            justify-content: flex-start;
        }

        .message-bubble {
            padding: 1.5rem 2rem;
            border-radius: var(--border-radius-xl);
            max-width: 80%;
            word-wrap: break-word;
            line-height: 1.7;
            box-shadow: var(--shadow);
            position: relative;
            transition: all var(--transition-duration) ease;
        }

        .message-bubble:hover {
            transform: translateY(-1px);
            box-shadow: var(--shadow-lg);
        }

        .user-message .message-bubble {
            background: var(--user-message-bg);
            color: white;
            border-bottom-right-radius: 8px;
            margin-left: auto;
        }

        .ai-message .message-bubble {
            background: var(--card-bg);
            color: var(--text-color);
            border: 1px solid var(--border-color);
            border-bottom-left-radius: 8px;
        }

        .response-time {
            font-size: 0.75rem;
            opacity: 0.7;
            margin-top: 0.75rem;
            text-align: right;
            font-style: italic;
        }

        /* Typing indicator */
        .typing-indicator {
            display: flex;
            align-items: center;
            margin-bottom: 1rem;
            color: var(--text-color);
            font-style: italic;
        }

        @keyframes pulse {

            0%,
            100% {
                opacity: 0.6;
            }

            50% {
                opacity: 1;
            }
        }

        .loading {
            display: inline-block;
            width: 0.75rem;
            height: 0.75rem;
            border-radius: 50%;
            background-color: var(--primary-color);
            animation: pulse 1.5s infinite ease-in-out;
            margin-left: 0.5rem;
        }

        pre {
            position: relative;
            font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
            background: #272822 !important;
            padding: 1rem;
            border-radius: 0.5rem;
            overflow-x: auto;
            margin: 1rem 0;
            line-height: 1.5;
            box-shadow: var(--shadow);
        }


        pre code {
            display: block;
            color: #f8f8f2;
            background: transparent !important;
            padding: 0;
            overflow-x: auto;
        }

        pre code .line-number {
            display: inline-block;
            width: 2em;
            user-select: none;
            opacity: 0.5;
            margin-right: 1em;
            text-align: right;
            color: #6c6c6c;
            pointer-events: none;
        }

        /* Tables */
        .table-wrapper {
            overflow-x: auto;
            margin: 1rem 0;
            border-radius: 0.5rem;
            box-shadow: var(--shadow);
        }

        .markdown-table {
            width: 100%;
            border-collapse: collapse;
            margin: 0;
        }

        .markdown-table th,
        .markdown-table td {
            padding: 0.75rem;
            border: 1px solid var(--border-color);
        }

        .markdown-table th {
            background-color: var(--input-bg);
            font-weight: 600;
            text-align: left;
        }

        .markdown-table tr:nth-child(even) {
            background-color: var(--input-bg);
        }

        /* Inline code */
        .message-content code:not(pre code) {
            font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
            background: var(--input-bg);
            color: var(--text-color);
            padding: 0.2em 0.4em;
            border-radius: 0.3em;
            font-size: 0.9em;
        }

        /* Images */
        .message-content img {
            max-width: 100%;
            height: auto;
            border-radius: 0.5rem;
            margin: 0.5rem 0;
        }

        /* Horizontal rule */
        .message-content hr {
            border: none;
            height: 1px;
            background-color: var(--border-color);
            margin: 1.5rem 0;
        }

        .code-copy-button {
            position: absolute;
            top: 0.75rem;
            right: 0.75rem;
            background: var(--primary-color);
            color: white;
            border: none;
            border-radius: var(--border-radius-sm);
            padding: 0.5rem 0.75rem;
            cursor: pointer;
            opacity: 0;
            transition: all var(--transition-duration) ease;
            font-size: 0.75rem;
            font-weight: 500;
        }

        pre:hover .code-copy-button {
            opacity: 1;
        }

        .code-copy-button:hover {
            transform: scale(1.05);
            box-shadow: var(--shadow);
        }

        /* Settings popup */
        .settings-popup {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%) scale(0.9);
            background: var(--card-bg);
            border: 1px solid var(--border-color);
            border-radius: var(--border-radius-lg);
            box-shadow: var(--shadow-xl);
            z-index: 1001;
            display: none;
            width: 90%;
            max-width: 600px;
            max-height: 90vh;
            overflow: hidden;
            opacity: 0;
            transition: all var(--transition-duration) ease;
        }

        .settings-popup.show {
            display: block;
            opacity: 1;
            transform: translate(-50%, -50%) scale(1);
        }

        .settings-header {
            padding: 2rem 2rem 1rem;
            background: var(--primary-color);
            color: white;
            text-align: center;
            position: relative;
        }

        .settings-header h3 {
            font-size: 1.5rem;
            font-weight: 600;
            margin: 0;
        }

        .settings-tabs {
            display: flex;
            background: var(--card-bg);
            border-bottom: 1px solid var(--border-color);
            overflow-x: auto;
        }

        .settings-tab {
            flex: 1;
            padding: 1.25rem 1rem;
            background: transparent;
            border: none;
            border-bottom: 3px solid transparent;
            color: var(--text-color);
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.75rem;
            transition: all var(--transition-duration) ease;
            font-size: 0.875rem;
            font-weight: 500;
            min-width: 140px;
        }

        .settings-tab:hover {
            background: var(--input-bg);
            color: var(--primary-color);
        }

        .settings-tab.active {
            color: var(--primary-color);
            border-bottom-color: var(--primary-color);
            background: var(--input-bg);
        }

        .settings-content {
            padding: 2rem;
            display: none;
            max-height: 400px;
            overflow-y: auto;
        }

        .settings-content.active {
            display: block;
        }

        .settings-group {
            margin-bottom: 2rem;
        }

        .settings-group label {
            display: block;
            margin-bottom: 0.75rem;
            font-weight: 600;
            color: var(--text-color);
            font-size: 0.875rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .settings-dropdown select {
            width: 100%;
            padding: 1rem;
            border: 2px solid var(--border-color);
            border-radius: var(--border-radius);
            background: var(--input-bg);
            color: var(--text-color);
            cursor: pointer;
            font-size: 1rem;
            transition: all var(--transition-duration) ease;
        }

        .settings-dropdown select:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .account-info {
            background: var(--input-bg);
            border: 2px solid var(--border-color);
            padding: 1.5rem;
            border-radius: var(--border-radius);
            margin-bottom: 1rem;
        }

        .account-info p {
            margin: 0.5rem 0;
            font-size: 0.9rem;
        }

        .account-info span {
            font-weight: 600;
            color: var(--primary-color);
        }

        /* Enhanced Range Inputs */
        input[type="range"] {
            width: 100%;
            height: 6px;
            margin: 1rem 0;
            appearance: none;
            background: var(--border-color);
            border-radius: 3px;
            outline: none;
            transition: all var(--transition-duration) ease;
        }

        input[type="range"]::-webkit-slider-thumb {
            appearance: none;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background: var(--primary-color);
            cursor: pointer;
            box-shadow: var(--shadow);
            transition: all var(--transition-duration) ease;
        }

        input[type="range"]::-webkit-slider-thumb:hover {
            background: var(--secondary-color);
            transform: scale(1.1);
        }

        input[type="range"]::-moz-range-thumb {
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background: var(--primary-color);
            cursor: pointer;
            border: none;
            box-shadow: var(--shadow);
            transition: all var(--transition-duration) ease;
        }

        input[type="range"]::-moz-range-thumb:hover {
            background: var(--secondary-color);
            transform: scale(1.1);
        }

        /* Settings Footer */
        .settings-footer {
            display: flex;
            justify-content: space-between;
            align-items: center;
            gap: 1rem;
            padding: 1.5rem 2rem;
            background: var(--input-bg);
            border-top: 1px solid var(--border-color);
        }

        .settings-footer .btn {
            flex: 1;
            max-width: 200px;
        }

        /* Enhanced Code Blocks */
        pre {
            position: relative;
            font-family: 'JetBrains Mono', 'Fira Code', 'Consolas', monospace;
            background: #1e1e1e !important;
            border-radius: var(--border-radius);
            margin: 1.5rem 0;
            overflow: hidden;
            box-shadow: var(--shadow-lg);
        }

        pre code {
            display: block;
            padding: 1.5rem;
            overflow-x: auto;
            line-height: 1.6;
            font-size: 0.875rem;
        }

        .code-copy-button {
            position: absolute;
            top: 0.75rem;
            right: 0.75rem;
            background: var(--primary-color);
            color: white;
            border: none;
            border-radius: var(--border-radius-sm);
            padding: 0.5rem 0.75rem;
            cursor: pointer;
            opacity: 0;
            transition: all var(--transition-duration) ease;
            font-size: 0.75rem;
            font-weight: 500;
        }

        pre:hover .code-copy-button {
            opacity: 1;
        }

        .code-copy-button:hover {
            transform: scale(1.05);
            box-shadow: var(--shadow);
        }

        /* Enhanced Tables */
        .table-wrapper {
            overflow-x: auto;
            margin: 1.5rem 0;
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
        }

        .markdown-table {
            width: 100%;
            border-collapse: collapse;
            margin: 0;
            background: var(--card-bg);
        }

        .markdown-table th,
        .markdown-table td {
            padding: 1rem;
            text-align: left;
            border-bottom: 1px solid var(--border-color);
        }

        .markdown-table th {
            background: var(--input-bg);
            font-weight: 600;
            color: var(--primary-color);
            text-transform: uppercase;
            font-size: 0.875rem;
            letter-spacing: 0.5px;
        }

        .markdown-table tr:hover {
            background: var(--input-bg);
        }

        /* Enhanced Message Content */
        .message-content {
            line-height: 1.7;
        }

        .message-content p {
            margin-bottom: 1rem;
        }

        .message-content ul,
        .message-content ol {
            margin-bottom: 1rem;
            padding-left: 1.5rem;
        }

        .message-content li {
            margin-bottom: 0.5rem;
        }

        .message-content blockquote {
            border-left: 4px solid var(--primary-color);
            padding-left: 1.5rem;
            margin: 1.5rem 0;
            font-style: italic;
            opacity: 0.9;
        }

        .message-content h1,
        .message-content h2,
        .message-content h3,
        .message-content h4,
        .message-content h5,
        .message-content h6 {
            margin-top: 2rem;
            margin-bottom: 1rem;
            font-weight: 600;
            color: var(--primary-color);
        }

        .message-content a {
            color: var(--primary-color);
            text-decoration: none;
            border-bottom: 1px solid transparent;
            transition: all var(--transition-duration) ease;
        }

        .message-content a:hover {
            border-bottom-color: var(--primary-color);
        }

        .message-content code:not(pre code) {
            background: var(--input-bg);
            color: var(--primary-color);
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
            font-size: 0.875rem;
            font-family: 'JetBrains Mono', 'Fira Code', 'Consolas', monospace;
        }

        /* Delete Message Button */
        .delete-message-btn {
            position: absolute;
            top: 0.75rem;
            right: 0.75rem;
            background: var(--danger-color);
            color: white;
            border: none;
            border-radius: 50%;
            width: 2rem;
            height: 2rem;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            opacity: 0;
            transition: all var(--transition-duration) ease;
            font-size: 0.75rem;
        }

        .message-bubble:hover .delete-message-btn {
            opacity: 1;
        }

        .delete-message-btn:hover {
            background: #e74c3c;
            transform: scale(1.1);
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .settings-popup {
                width: 95%;
                max-height: 95vh;
            }

            .settings-header {
                padding: 1.5rem 1rem 0.75rem;
            }

            .settings-header h3 {
                font-size: 1.25rem;
            }

            .settings-tab {
                padding: 1rem 0.75rem;
                font-size: 0.8rem;
            }

            .settings-content {
                padding: 1.5rem;
            }

            .settings-footer {
                padding: 1rem;
                flex-direction: column;
            }

            .settings-footer .btn {
                max-width: none;
                width: 100%;
            }
        }

        /* Overlay Styles */
        .chat-list-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            z-index: 999;
            display: none;
            opacity: 0;
            transition: opacity var(--transition-duration) ease;
        }

        .chat-list-overlay.show {
            display: block;
            opacity: 1;
        }

        .settings-popup-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            z-index: 1000;
            display: none;
            opacity: 0;
            transition: opacity var(--transition-duration) ease;
        }

        .settings-popup-overlay.show {
            display: block;
            opacity: 1;
        }

        /* Loading Overlay */
        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.7);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 9999;
        }

        .loading-spinner {
            width: 3rem;
            height: 3rem;
            border: 4px solid var(--border-color);
            border-top: 4px solid var(--primary-color);
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>

<body class="{{settings.theme}}-theme">
    <!-- Enhanced Chat History Sidebar -->
    <aside class="chat-list-container hidden" id="chat-list-container">
        <div class="chat-list-header">
            <h2>Chat History</h2>
            <div class="header-actions">
                <button class="btn-icon" id="new-chat-button" title="Start new chat">
                    <i class="fas fa-plus"></i>
                </button>
                <button class="btn-icon" id="close-chat-list-button" aria-label="Close Chat List">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        </div>
        <ul class="chat-list" id="chat-list"></ul>
    </aside>
    <div class="chat-list-overlay" id="chat-list-overlay"></div>

    <!-- Enhanced Main Chat Area -->
    <main class="chat-container full" id="chat-container">
        <header class="chat-header">
            <button class="btn-icon" id="open-chat-list-button" aria-label="Open Chat List">
                <i class="fas fa-bars"></i>
            </button>
            <div class="chat-header-title">
                <img src="/Assets/Images/dgicon.svg" alt="Logo" class="logo">
                CHAT API
            </div>
            <div class="chat-header-actions">
                <button class="btn-icon" id="settings-button" aria-label="Settings">
                    <i class="fas fa-cog"></i>
                </button>
            </div>
        </header>
        <section class="chat-content">
            {{#if isChatIdOfOtherUser}}
            <div
                style="background-color: var(--input-bg); color: var(--text-color); padding: 0.25rem; border-radius: 0.5rem; box-shadow: var(--shadow); text-align: center;">
                This Chat ID Belongs to <strong>{{chatIdUsername}}</strong>
            </div>
            {{/if}}
            <div class="chat-messages" id="chat-messages"></div>
            <div id="scroll-down-btn" class="scroll-down-btn">
                <i class="fas fa-arrow-down"></i>
            </div>
            <div class="chat-input-container">
                <form class="chat-input-form" id="chat-form">
                    <textarea class="chat-input" id="chat-input" placeholder="Type your message..." autocomplete="off"
                        aria-label="Chat input" rows="1"></textarea>
                    <button type="submit" class="send-button" id="send-button">
                        <i class="fas fa-paper-plane"></i>
                    </button>
                </form>
            </div>
            <div class="settings-popup" id="settings-popup">
                <div class="settings-header">
                    <h3>Settings</h3>
                </div>
                <div class="settings-tabs" role="tablist">
                    <button class="settings-tab active" data-tab="bot-settings" role="tab" aria-selected="true">
                        <i class="fas fa-robot"></i> Bot Settings
                    </button>
                    <button class="settings-tab" data-tab="appearance" role="tab" aria-selected="false">
                        <i class="fas fa-palette"></i> Appearance
                    </button>
                    <button class="settings-tab" data-tab="account" role="tab" aria-selected="false">
                        <i class="fas fa-user"></i> Account
                    </button>
                </div>
                <div class="settings-content active" data-tab-content="bot-settings" role="tabpanel">
                    <div class="settings-group">
                        <label for="model-select">AI Model</label>
                        <div class="settings-dropdown">
                            <select id="model-select">
                                <optgroup label="Gemini Models"></optgroup>
                                <option value="gemini/gemini-2.0-flash">Gemini 2.0 Flash</option>
                                <option value="gemini/gemini-2.0-flash-lite">Gemini 2.0 Flash Lite</option>
                                <option value="gemini/gemini-1.5-flash">Gemini 1.5 Flash</option>
                                <option value="gemini/gemini-1.5-flash-8b">Gemini 1.5 Flash 8B</option>
                                <option value="gemini/gemini-1.5-pro">Gemini 1.5 Pro</option>
                                </optgroup>
                                <optgroup label="NVIDIA Models">
                                    <option value="nvidia/llama-3.1-nemotron-nano-8b-v1">Llama-3.1-Nemotron-Nano-8B-v1
                                    </option>
                                    <option value="nvidia/llama-3.3-nemotron-super-49b-v1">
                                        Llama-3.3-Nemotron-Super-49B-v1</option>
                                </optgroup>
                                <optgroup label="Others">
                                    <option value="mallow/mallow-t1">Mallow-T1</option>
                                </optgroup>
                            </select>
                        </div>
                    </div>
                    <div class="settings-group">
                        <label for="temperature">Response Creativity</label>
                        <input type="range" id="temperature" min="0" max="200" value="{{settings.temperature}}">
                        <span id="temperature-value">{{settings.temperature_value}}</span>
                    </div>
                </div>
                <div class="settings-content" data-tab-content="appearance" role="tabpanel">
                    <div class="settings-group">
                        <label for="theme-select">Theme</label>
                        <div class="settings-dropdown">
                            <select id="theme-select">
                                <option value="dark" {{#if (eq settings.theme "dark" )}}selected{{/if}}>Dark</option>
                                <option value="light" {{#if (eq settings.theme "light" )}}selected{{/if}}>Light</option>
                                <option value="sepia" {{#if (eq settings.theme "sepia" )}}selected{{/if}}>Sepia</option>
                                <option value="contrast" {{#if (eq settings.theme "contrast" )}}selected{{/if}}>Contrast
                                </option>
                                <option value="system" {{#if (eq settings.theme "system" )}}selected{{/if}}>System
                                    Default
                                </option>
                            </select>
                        </div>
                    </div>
                    <div class="settings-group">
                        <label for="font-size">Font Size</label>
                        <input type="range" id="font-size" min="12" max="24" value="{{settings.font_size}}">
                        <span id="font-size-value">{{settings.font_size}}px</span>
                    </div>
                </div>
                <div class="settings-content" data-tab-content="account" role="tabpanel">
                    <div class="settings-group">
                        <label>Account Information</label>
                        <div class="account-info">
                            <p>User: <span id="headerProfileUserName">{{UserName}}</span></p>
                        </div>
                    </div>
                    <div class="settings-group">
                        <label>Subscription Details</label>
                        <div class="account-info">
                            {{#if (eq role "NormalUser")}}
                            <p>Plan: <span id="userSubscriptionPlan">Basic (Free)</span></p>
                            <p>Messages Per Day: <span id="messagesUsed">{{settings.messageCount}}</span>/<span
                                    id="messagesPerDay">{{#if settings.dailyLimit}}{{settings.dailyLimit}}{{else}}
                                    Unlimited{{/if}}</span></p>
                            {{/if}}

                            {{#if (eq role "Guest")}}
                            <p>Plan: <span id="userSubscriptionPlan">Guest (Restricted)</span></p>
                            {{/if}}

                            {{#if (eq role "Admin")}}
                            <p>Plan: <span id="userSubscriptionPlan">MBK Tech
                                    Studio Team</span></p>
                            <p>Messages Per Day: Unlimited</p>
                            {{/if}}

                            {{#if (eq role "SuperAdmin")}}
                            <p>Plan: <span id="userSubscriptionPlan">Administration</span></p>
                            <p>Messages Per Day: Unlimited</p>
                            {{/if}}
                        </div>
                    </div>
                    <a href="https://portal.mbktechstudio.com/user/settings/plan" target="_blank"
                        class="btn btn-primary">
                        <i class="fas fa-arrow-up"></i> Upgrade Plan
                    </a>
                    <a href="https://portal.mbktechstudio.com/user/settings" target="_blank" class="btn btn-ghost">
                        <i class="fas fa-cog"></i> Account Settings
                    </a>
                </div>
                <div class="settings-footer">
                    <button id="logout-button" onclick="logout()" class="btn btn-danger">
                        <i class="fas fa-sign-out-alt"></i> Logout
                    </button>
                    <button id="save-settings" class="btn btn-success">
                        <i class="fas fa-save"></i> Save Settings
                    </button>
                    <button id="cancel-settings" class="btn btn-ghost">
                        <i class="fas fa-times"></i> Cancel
                    </button>
                </div>
            </div>
            <div class="settings-popup-overlay" id="settings-popup-overlay"></div>
        </section>
    </main>

    <script>
        // DOM Elements
        const chatMessages = document.getElementById('chat-messages');
        const chatForm = document.getElementById('chat-form');
        const chatInput = document.getElementById('chat-input');
        const sendButton = document.getElementById('send-button');
        const newChatButton = document.getElementById('new-chat-button');
        const chatList = document.getElementById('chat-list');
        const chatListContainer = document.getElementById('chat-list-container');
        const openChatListButton = document.getElementById('open-chat-list-button');
        const closeChatListButton = document.getElementById('close-chat-list-button');
        const chatContainer = document.getElementById('chat-container');
        const settingsButton = document.getElementById('settings-button');
        const settingsPopup = document.getElementById('settings-popup');
        const cancelSettingsButton = document.getElementById('cancel-settings');
        const saveSettingsButton = document.getElementById('save-settings');
        const settingsTabs = document.querySelectorAll('.settings-tab');
        const settingsContents = document.querySelectorAll('.settings-content');
        const modelSelect = document.getElementById('model-select');
        const themeSelect = document.getElementById('theme-select');
        const temperatureInput = document.getElementById('temperature');
        const temperatureValue = document.getElementById('temperature-value');
        const fontSizeInput = document.getElementById('font-size');
        const fontSizeValue = document.getElementById('font-size-value');
        const settingsOverlay = document.getElementById('settings-popup-overlay');
        const chatListOverlay = document.getElementById('chat-list-overlay');
        const scrollDownBtn = document.getElementById('scroll-down-btn');

        let currentPage = 1;
        let totalPages = 1;
        let isLoadingMore = false;

        // Mobile viewport and pull-to-refresh handling
        function handleMobileViewport() {
            if (window.innerWidth <= 768) {
                // Set proper viewport height for mobile
                const vh = window.innerHeight * 0.01;
                document.documentElement.style.setProperty('--vh', `${vh}px`);
                
                // Enable pull-to-refresh on chat messages
                if (chatMessages) {
                    chatMessages.addEventListener('touchstart', handleTouchStart, { passive: true });
                    chatMessages.addEventListener('touchmove', handleTouchMove, { passive: false });
                }
            }
        }

        let touchStartY = 0;
        let touchStartTime = 0;

        function handleTouchStart(e) {
            touchStartY = e.touches[0].clientY;
            touchStartTime = Date.now();
        }

        function handleTouchMove(e) {
            const touchY = e.touches[0].clientY;
            const touchDiff = touchY - touchStartY;
            const timeDiff = Date.now() - touchStartTime;
            
            // Allow pull-to-refresh if scrolled to top and pulling down
            if (chatMessages.scrollTop === 0 && touchDiff > 0 && timeDiff < 500) {
                // Let the browser handle the pull-to-refresh
                return;
            }
        }

        // Handle virtual keyboard on mobile
        function handleVirtualKeyboard() {
            if (window.innerWidth <= 768) {
                const chatInput = document.getElementById('chat-input');
                if (chatInput) {
                    chatInput.addEventListener('focus', () => {
                        // Small delay to ensure keyboard is visible
                        setTimeout(() => {
                            chatInput.scrollIntoView({ behavior: 'smooth', block: 'end' });
                        }, 300);
                    });
                    
                    chatInput.addEventListener('blur', () => {
                        // Reset viewport when keyboard hides
                        setTimeout(handleMobileViewport, 100);
                    });
                }
            }
        }

        // Update viewport height on orientation change
        window.addEventListener('orientationchange', () => {
            setTimeout(() => {
                handleMobileViewport();
                handleVirtualKeyboard();
            }, 100);
        });

        window.addEventListener('resize', () => {
            handleMobileViewport();
            handleVirtualKeyboard();
        });


        marked.setOptions({
            breaks: true,
            gfm: true,
            smartypants: true,
            tables: true,
            highlight: function (code, lang) {
                if (lang && hljs.getLanguage(lang)) {
                    return hljs.highlight(lang, code).value;
                }
                return hljs.highlightAuto(code).value;
            }
        });

        // State variables
        let currentChatId = '{{chatId}}' || null;
        let isChatListVisible = window.innerWidth > 768;
        let isWaitingForResponse = false;
        let currentSettings = {
            model: '{{settings.ai_model}}',
            theme: '{{settings.theme}}',
            temperature: parseFloat('{{ settings.temperature }}') || 0.7,
            fontSize: parseInt('{{ settings.font_size }}') || 16,
            messageCount: parseInt('{{ settings.messageCount }}') || 0,
            dailyLimit: parseInt('{{ settings.dailyLimit }}') || 50
        };

        // Scroll button visibility
        function updateScrollDownBtnVisibility() {
            const threshold = 20;
            if (chatMessages.scrollHeight - chatMessages.scrollTop - chatMessages.clientHeight > threshold) {
                scrollDownBtn.style.display = 'flex';
            } else {
                scrollDownBtn.style.display = 'none';
            }
        }

        // Setup event listeners
        function setupEventListeners() {
            chatForm.addEventListener('submit', handleFormSubmit);
            chatInput.addEventListener('keydown', (e) => {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    handleFormSubmit(e);
                }
            });
            chatInput.addEventListener('input', updateSendButtonState);
            openChatListButton.addEventListener('click', showChatList);
            closeChatListButton.addEventListener('click', hideChatList);
            chatListOverlay.addEventListener('click', hideChatList);
            settingsButton.addEventListener('click', () => {
                settingsPopup.classList.add('show');
                settingsOverlay.classList.add('show');
                loadSettingsValuesToPopup();
            });
            chatInput.addEventListener('input', () => {
                chatInput.style.height = 'auto'; // Reset height to calculate scrollHeight
                const maxRows = 5;
                const lineHeight = parseInt(window.getComputedStyle(chatInput).lineHeight, 10) || 16; // Default to 16px if parsing fails
                const maxHeight = lineHeight * maxRows;

                if (chatInput.scrollHeight > maxHeight) {
                    chatInput.style.height = `${maxHeight}px`;
                    chatInput.style.overflowY = 'auto'; // Enable scrolling if max rows are reached
                } else {
                    chatInput.style.height = `${chatInput.scrollHeight}px`;
                    chatInput.style.overflowY = 'hidden'; // Hide scrolling if within limit
                }
            });
            cancelSettingsButton.addEventListener('click', closeSettings);
            saveSettingsButton.addEventListener('click', saveSettings);
            settingsTabs.forEach(tab => {
                tab.addEventListener('click', () => {
                    settingsTabs.forEach(t => {
                        t.classList.remove('active');
                        t.setAttribute('aria-selected', 'false');
                    });
                    settingsContents.forEach(c => c.classList.remove('active'));
                    tab.classList.add('active');
                    tab.setAttribute('aria-selected', 'true');
                    document.querySelector(`.settings-content[data-tab-content="${tab.dataset.tab}"]`).classList.add('active');
                });
            });
            temperatureInput.addEventListener('input', () => {
                const tempValue = (temperatureInput.value / 100).toFixed(1);
                temperatureValue.textContent = tempValue;
            });
            fontSizeInput.addEventListener('input', () => {
                fontSizeValue.textContent = `${fontSizeInput.value}px`;
            });
            settingsOverlay.addEventListener('click', (e) => {
                if (e.target === settingsOverlay) closeSettings();
            });
            newChatButton.addEventListener('click', startNewChat);
            window.addEventListener('resize', setupResponsiveBehavior);
            chatMessages.addEventListener('scroll', updateScrollDownBtnVisibility);
            scrollDownBtn.addEventListener('click', () => {
                chatMessages.scrollTop = chatMessages.scrollHeight;
                updateScrollDownBtnVisibility();
            });
        }

        function setupScrollListener() {
            chatList.addEventListener('scroll', () => {
                if (!isLoadingMore && currentPage < totalPages && isScrolledToBottom()) {
                    fetchChatHistoryList(currentPage + 1);
                }
            });
        }

        function isScrolledToBottom() {
            return chatList.scrollTop + chatList.clientHeight >= chatList.scrollHeight - 100;
        }

        function fetchChatHistoryList(page = 1, append = false) {
            if (isLoadingMore) return;

            isLoadingMore = true;

            // Show loading indicator only if it's not an append operation
            if (!append) {
                chatList.classList.add('chat-list-loading');
                chatList.innerHTML = '';

                // Create 5 skeleton items
                for (let i = 0; i < 5; i++) {
                    const skeletonItem = document.createElement('li');
                    skeletonItem.className = 'chat-list-item skeleton-loading';
                    skeletonItem.innerHTML = '<span style="visibility: hidden;">Loading...</span>';
                    chatList.appendChild(skeletonItem);
                }
            } else {
                // For append operations, just show a small loading spinner at the bottom
                const loadingItem = document.createElement('li');
                loadingItem.className = 'chat-list-item loading-more';
                loadingItem.innerHTML = '<div class="loading-spinner"></div>';
                chatList.appendChild(loadingItem);
            }

            fetch(`/api/chat/histories?page=${page}`)
                .then(response => response.ok ? response.json() : Promise.reject('Failed to fetch chat histories'))
                .then(histories => {
                    // Remove loading indicators
                    if (!append) {
                        chatList.classList.remove('chat-list-loading');
                    }
                    const loadingItems = chatList.querySelectorAll('.loading-more, .skeleton-loading');
                    loadingItems.forEach(item => item.remove());

                    isLoadingMore = false;

                    // Handle pagination if it exists, otherwise set defaults
                    if (histories.pagination) {
                        currentPage = histories.pagination.currentPage;
                        totalPages = histories.pagination.totalPages;
                    } else {
                        currentPage = 1;
                        totalPages = 1;
                    }

                    // Convert rawDate strings back to Date objects
                    const processHistories = (historyGroup) => {
                        if (!historyGroup || !Array.isArray(historyGroup)) return historyGroup;
                        return historyGroup.map(item => ({
                            ...item,
                            rawDate: item.rawDate ? new Date(item.rawDate) : new Date(0)
                        }));
                    };

                    // Process all history groups
                    const processedHistories = {
                        today: processHistories(histories.today),
                        yesterday: processHistories(histories.yesterday),
                        last7Days: processHistories(histories.last7Days),
                        last30Days: processHistories(histories.last30Days),
                        older: {}
                    };

                    // Process older histories
                    if (histories.older && typeof histories.older === 'object') {
                        for (const month in histories.older) {
                            processedHistories.older[month] = processHistories(histories.older[month]);
                        }
                    }

                    // Add pagination if it exists
                    if (histories.pagination) {
                        processedHistories.pagination = histories.pagination;
                    }

                    // If appending, we need to merge the new items with existing ones
                    if (append) {
                        // Merge the new items with existing grouped chats
                        const existingChats = groupChatsFromDOM();
                        const mergedChats = mergeChatGroups(existingChats, processedHistories);
                        renderChatList(mergedChats);
                    } else {
                        // First load, just render normally
                        renderChatList(processedHistories);
                    }
                })
                .catch(error => {
                    chatList.classList.remove('chat-list-loading');
                    const loadingItems = chatList.querySelectorAll('.loading-more');
                    loadingItems.forEach(item => item.remove());
                    isLoadingMore = false;

                    console.error("Error fetching chat histories:", error);
                    showErrorToast("Failed to load chat history");
                });
        }

        // Helper function to get existing chats from DOM
        function groupChatsFromDOM() {
            const sections = Array.from(chatList.querySelectorAll('.chat-list-section-header'));
            const groupedChats = {
                today: [],
                yesterday: [],
                last7Days: [],
                last30Days: [],
                older: {}
            };

            sections.forEach(section => {
                const sectionTitle = section.textContent.trim();
                let current = section.nextElementSibling;
                const items = [];

                while (current && current.classList.contains('chat-list-item')) {
                    const span = current.querySelector('span');
                    if (span) {
                        // Safely parse timestamp
                        let rawDate = new Date(0); // Default to epoch
                        const timestamp = current.dataset.timestamp;
                        if (timestamp && timestamp !== '0') {
                            rawDate = new Date(parseInt(timestamp));
                        }

                        items.push({
                            id: current.dataset.chatId,
                            created_at: span.textContent,
                            rawDate: rawDate
                        });
                    }
                    current = current.nextElementSibling;
                }

                if (items.length > 0) {
                    if (sectionTitle === 'Today') groupedChats.today = items;
                    else if (sectionTitle === 'Yesterday') groupedChats.yesterday = items;
                    else if (sectionTitle === 'Last 7 Days') groupedChats.last7Days = items;
                    else if (sectionTitle === 'Last 30 Days') groupedChats.last30Days = items;
                    else groupedChats.older[sectionTitle] = items;
                }
            });

            return groupedChats;
        }

        // Helper function to merge chat groups
        function mergeChatGroups(existing, newData) {
            // Merge each time period with safe array concatenation
            const merged = {
                today: [...(existing.today || []), ...(newData.today || [])],
                yesterday: [...(existing.yesterday || []), ...(newData.yesterday || [])],
                last7Days: [...(existing.last7Days || []), ...(newData.last7Days || [])],
                last30Days: [...(existing.last30Days || []), ...(newData.last30Days || [])],
                older: { ...(existing.older || {}) }
            };

            // Add pagination if it exists
            if (newData.pagination) {
                merged.pagination = newData.pagination;
            }

            // Merge older chats by month
            if (newData.older && typeof newData.older === 'object') {
                for (const month in newData.older) {
                    if (merged.older[month]) {
                        merged.older[month] = [...merged.older[month], ...newData.older[month]];
                    } else {
                        merged.older[month] = newData.older[month];
                    }
                }
            }

            return merged;
        }

        // Modify the scroll listener
        function setupScrollListener() {
            chatList.addEventListener('scroll', () => {
                if (!isLoadingMore && currentPage < totalPages && isScrolledToBottom()) {
                    fetchChatHistoryList(currentPage + 1, true); // Pass true to append
                }
            });
        }

        // Update renderChatList to preserve existing items
        function renderChatList(groupedHistories) {
            // Clear only if it's not an append operation
            if (!isLoadingMore || currentPage === 1) {
                chatList.innerHTML = '';
            }

            // Your existing render logic, but now it will append to existing items
            const createSectionHeader = (title) => {
                const header = document.createElement('div');
                header.className = 'chat-list-section-header';
                header.textContent = title;
                return header;
            };

            const createChatItems = (chats) => {
                if (!chats || chats.length === 0) return null;

                const fragment = document.createDocumentFragment();
                chats.forEach(history => {
                    const listItem = document.createElement('li');
                    listItem.className = 'chat-list-item';
                    listItem.dataset.chatId = history.id;

                    // Safely handle timestamp - convert to Date if it's not already
                    let timestamp = 0;
                    if (history.rawDate) {
                        if (typeof history.rawDate.getTime === 'function') {
                            timestamp = history.rawDate.getTime();
                        } else {
                            // Try to parse as date string
                            const dateObj = new Date(history.rawDate);
                            timestamp = isNaN(dateObj.getTime()) ? 0 : dateObj.getTime();
                        }
                    }
                    listItem.dataset.timestamp = timestamp;

                    listItem.innerHTML = `
                        <span>${history.created_at || 'Unknown time'}</span>
                        <button class="delete-btn" title="Delete chat" onclick="event.stopPropagation(); deleteChat('${history.id}')">
                            <i class="fas fa-trash"></i>
                        </button>
                    `;
                    listItem.addEventListener('click', () => {
                        window.location.href = `/chatbot/${history.id}`;
                    });
                    fragment.appendChild(listItem);
                });
                return fragment;
            };

            // Today section
            if (groupedHistories.today && groupedHistories.today.length > 0) {
                const existingSection = Array.from(chatList.querySelectorAll('.chat-list-section-header')).find(header => header.textContent === 'Today');
                if (!existingSection) {
                    chatList.appendChild(createSectionHeader('Today'));
                }
                const items = createChatItems(groupedHistories.today);
                if (items) chatList.appendChild(items);
            }

            // Yesterday section
            if (groupedHistories.yesterday && groupedHistories.yesterday.length > 0) {
                const existingSection = Array.from(chatList.querySelectorAll('.chat-list-section-header')).find(header => header.textContent === 'Yesterday');
                if (!existingSection) {
                    chatList.appendChild(createSectionHeader('Yesterday'));
                }
                const items = createChatItems(groupedHistories.yesterday);
                if (items) chatList.appendChild(items);
            }

            // Last 7 Days section
            if (groupedHistories.last7Days && groupedHistories.last7Days.length > 0) {
                const existingSection = Array.from(chatList.querySelectorAll('.chat-list-section-header')).find(header => header.textContent === 'Last 7 Days');
                if (!existingSection) {
                    chatList.appendChild(createSectionHeader('Last 7 Days'));
                }
                const items = createChatItems(groupedHistories.last7Days);
                if (items) chatList.appendChild(items);
            }

            // Last 30 Days section
            if (groupedHistories.last30Days && groupedHistories.last30Days.length > 0) {
                const existingSection = Array.from(chatList.querySelectorAll('.chat-list-section-header')).find(header => header.textContent === 'Last 30 Days');
                if (!existingSection) {
                    chatList.appendChild(createSectionHeader('Last 30 Days'));
                }
                const items = createChatItems(groupedHistories.last30Days);
                if (items) chatList.appendChild(items);
            }

            // Older (by month) section
            if (groupedHistories.older && Object.keys(groupedHistories.older).length > 0) {
                // Sort months in descending order
                const sortedMonths = Object.keys(groupedHistories.older).sort((a, b) => {
                    return new Date(b) - new Date(a);
                });

                sortedMonths.forEach(month => {
                    const existingSection = Array.from(chatList.querySelectorAll('.chat-list-section-header')).find(header => header.textContent === month);
                    if (!existingSection) {
                        chatList.appendChild(createSectionHeader(month));
                    }
                    const items = createChatItems(groupedHistories.older[month]);
                    if (items) chatList.appendChild(items);
                });
            }

            // Empty state
            if (chatList.children.length === 0) {
                const emptyItem = document.createElement('li');
                emptyItem.textContent = 'No chat history yet';
                emptyItem.style.padding = '10px';
                emptyItem.style.color = 'var(--text-color)';
                emptyItem.style.textAlign = 'center';
                chatList.appendChild(emptyItem);
            }
        }

        function loadChat(chatId) {
            currentChatId = chatId;

            // Show loading overlay
            const loadingOverlay = document.createElement('div');
            loadingOverlay.className = 'loading-overlay';
            loadingOverlay.innerHTML = '<div class="loading-spinner"></div>';
            document.body.appendChild(loadingOverlay);

            // Clear messages and add loading placeholders
            chatMessages.innerHTML = '';
            for (let i = 0; i < 3; i++) {
                const loadingMessage = document.createElement('div');
                loadingMessage.className = 'message message-loading';
                loadingMessage.innerHTML = `
                    <div class="message-bubble skeleton-loading" style="width: ${Math.random() * 200 + 100}px; height: ${Math.random() * 100 + 50}px;"></div>
                `;
                chatMessages.appendChild(loadingMessage);
                setTimeout(() => loadingMessage.classList.add('show'), 10);
            }

            fetch(`/api/chat/histories/${chatId}`)
                .then(response => {
                    if (!response.ok) {
                        if (response.status === 404) {
                            throw new Error('Chat does not exist');
                        }
                        throw new Error('Failed to load chat');
                    }
                    return response.json();
                })
                .then(chatHistory => {
                    // Remove loading overlay
                    loadingOverlay.remove();
                    chatMessages.innerHTML = '';

                    if (chatHistory?.conversation_history) {
                        chatHistory.conversation_history.forEach((message, index) => {
                            addMessage(message.parts[0].text, message.role === 'user' ? 'user' : 'ai', index.toString());
                        });
                    }
                })
                .catch(error => {
                    loadingOverlay.remove();
                    console.error("Error loading chat:", error);
                    addMessage(`Error loading chat: ${error.message}`, 'ai');
                });
        }

        // Start new chat
        function startNewChat() {
            currentChatId = null;
            chatMessages.innerHTML = '';
            chatInput.value = '';
            window.history.pushState({}, '', '/chatbot');
            updateSendButtonState();

            // Add welcome message with animation
            setTimeout(() => {
                addMessage("👋 Hello {{UserName}}! Welcome to your AI Assistant. I'm here to help you with anything you need. How can I assist you today?", 'ai', 'welcome');
            }, 500);
        }

        // Delete chat
        function deleteChat(chatId) {
            if (!confirm('Are you sure you want to delete this chat?')) return;
            fetch(`/api/chat/clear-history/${chatId}`, { method: 'POST' })
                .then(response => response.ok ? response.json() : Promise.reject('Failed to delete chat'))
                .then(() => {
                    fetchChatHistoryList();
                    if (currentChatId === chatId) startNewChat();
                })
                .catch(error => {
                    console.error("Error deleting chat:", error);
                    showErrorToast("Failed to delete chat");
                });
        }

        // Handle form submission
        function handleFormSubmit(e) {
            e.preventDefault();
            const messageText = chatInput.value.trim();
            if (!messageText || isWaitingForResponse) return;

            const startTime = Date.now();
            addMessage(messageText, 'user');
            chatInput.value = '';
            isWaitingForResponse = true;
            showTypingIndicator();
            updateSendButtonState();
            const payload = { message: messageText };
            if (currentChatId) payload.chatId = currentChatId;
            fetch('/api/bot-chat', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            })
                .then(response => response.ok ? response.json() : response.json().then(err => Promise.reject(err.message || "Unknown error")))
                .then(data => {
                    const responseTime = Date.now() - startTime; // Calculate response time
                    if (data.aiResponse) addMessage(data.aiResponse, 'ai', null, responseTime);
                    if (data.newChatId && !currentChatId) {
                        currentChatId = data.newChatId;
                        fetchChatHistoryList();
                    }
                })
                .catch(error => {
                    console.error("Error calling API:", error);
                    if (error === "Daily message limit reached") {
                        addMessage("You have reached your daily message limit. The limit will reset at midnight. Consider upgrading your plan for unlimited access.", 'ai');
                    } else {
                        addMessage(`Error getting AI response: ${error}`, 'ai');
                    }
                })
                .finally(() => {
                    isWaitingForResponse = false;
                    hideTypingIndicator();
                    updateSendButtonState();
                });
        }

        async function deleteMessage(messageId) {
            if (!currentChatId) return;

            if (!confirm('Are you sure you want to delete this message?')) return;

            try {
                const response = await fetch(`/api/chat/delete-message/${currentChatId}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ messageId })
                });

                if (!response.ok) {
                    throw new Error('Failed to delete message');
                }

                // Remove the message from the UI
                const messageElement = document.querySelector(`.message[data-message-id="${messageId}"]`);
                if (messageElement) {
                    messageElement.remove();
                }
            } catch (error) {
                console.error('Error deleting message:', error);
                showErrorToast('Failed to delete message');
            }
        }

        function addMessage(text, sender, messageId = Date.now(), responseTime = null) {
            // Skip rendering the IMPORTANT CONTEXT message if it's the first message
            if (chatMessages.children.length === 0) {

                const contextMessages = [
                    "IMPORTANT CONTEXT: You are an AI chatbot developed by Muhammad Bin Khalid and Maaz Waheed at MBK Tech Studio. You're a general purpose chatbot (not specifically about MBK Tech Studio). When asked about your identity, mention your developers and that you're a general AI assistant developed at MBK Tech Studio.",
                    "IMPORTANT CONTEXT: You are an AI chatbot developed by Muhammad Bin Khalid and Maaz Waheed at MBK Tech Studio. You're a general purpose chatbot (not specifically about MBK Tech Studio). When asked about your identity, mention your developers and that you're a general AI assistant developed at MBK Tech Studio. Keep responses concise."
                ];

                if (contextMessages.some(ctx => text.trim() === ctx.trim())) {
                    console.log("Skipping IMPORTANT CONTEXT message.");
                    return;
                }
            }

            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${sender}-message message-loading`;
            messageDiv.dataset.messageId = messageId;

            const deleteButton = sender === 'ai' ?
                `<button class="delete-message-btn" onclick="deleteMessage('${messageId}')" title="Delete message">
                    <i class="fas fa-trash"></i>
                </button>` : '';

            const processedText = sender === 'ai' ? marked.parse(text) : escapeHtml(text);

            // Add response time display for AI messages
            const responseTimeDisplay = sender === 'ai' && responseTime ?
                `<div class="response-time">Response time: ${(responseTime / 1000).toFixed(2)}s</div>` : '';

            messageDiv.innerHTML = `
        <div class="message-bubble">
            ${deleteButton}
            <div class="message-content">${processedText}</div>
                ${responseTimeDisplay}
            </div>
    `;

            chatMessages.appendChild(messageDiv);

            // Add staggered animation
            setTimeout(() => {
                messageDiv.classList.add('show');

                if (sender === 'ai') {
                    setTimeout(() => {
                        // Highlight all code blocks
                        document.querySelectorAll('pre code').forEach((block) => {
                            hljs.highlightElement(block);
                        });

                        // Add copy buttons
                        addCopyButtonsToCodeBlocks();

                        // Make links open in new tab
                        makeLinksOpenInNewTab(messageDiv);

                        // Process tables for better display
                        styleTables(messageDiv);
                    }, 0);
                }
            }, 100); // Small delay for animation

            chatMessages.scrollTop = chatMessages.scrollHeight;
            updateScrollDownBtnVisibility();
        }

        function escapeHtml(unsafe) {
            return unsafe
                .replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#039;")
                .replace(/\n/g, "<br>");
        }

        function addLineNumbersToCodeBlocks() {
            document.querySelectorAll('pre code').forEach((block) => {
                // Skip if line numbers already exist
                if (block.querySelector('.line-number')) return;

                const lines = block.innerHTML.split('\n');
                // Remove empty last line if it exists
                if (lines[lines.length - 1].trim() === '') lines.pop();

                // Only add line numbers if there are multiple lines
                if (lines.length > 1) {
                    block.innerHTML = lines.map((line, i) =>
                        `<span class="line-number">${i + 1}</span>${line}`).join('\n');
                }
            });
        }

        function addCopyButtonsToCodeBlocks() {
            document.querySelectorAll('pre').forEach((preElement) => {
                if (!preElement.querySelector('.code-copy-button')) {
                    const codeBlock = preElement.querySelector('code');
                    const copyButton = document.createElement('button');
                    copyButton.className = 'code-copy-button';
                    copyButton.setAttribute('aria-label', 'Copy code');
                    copyButton.title = 'Copy code';
                    copyButton.innerHTML = '<i class="fas fa-copy"></i>';
                    copyButton.addEventListener('click', (e) => {
                        e.stopPropagation();
                        // Extract only the code text without line numbers
                        const code = Array.from(codeBlock.childNodes)
                            .map(node => {
                                if (node.nodeType === Node.TEXT_NODE) {
                                    return node.textContent;
                                } else if (node.classList && node.classList.contains('line-number')) {
                                    return '';
                                }
                                return node.textContent;
                            })
                            .join('')
                            .replace(/\n$/, ''); // Remove trailing newline

                        copyToClipboard(code);
                        copyButton.innerHTML = '<i class="fas fa-check"></i>';
                        copyButton.style.background = 'var(--success-color)';
                        setTimeout(() => {
                            copyButton.innerHTML = '<i class="fas fa-copy"></i>';
                            copyButton.style.background = 'var(--primary-color)';
                        }, 2000);
                    });
                    preElement.appendChild(copyButton);
                }
            });
        }

        function makeLinksOpenInNewTab(container) {
            container.querySelectorAll('a').forEach(link => {
                link.setAttribute('target', '_blank');
                link.setAttribute('rel', 'noopener noreferrer');
            });
        }

        function styleTables(container) {
            container.querySelectorAll('table').forEach(table => {
                table.classList.add('markdown-table');
                const wrapper = document.createElement('div');
                wrapper.className = 'table-wrapper';
                table.parentNode.insertBefore(wrapper, table);
                wrapper.appendChild(table);
            });
        }

        // Copy to clipboard
        async function copyToClipboard(text) {
            try {
                await navigator.clipboard.writeText(text);
            } catch (err) {
                console.error('Copy failed:', err);
                const textarea = document.createElement('textarea');
                textarea.value = text;
                textarea.style.position = 'fixed';
                document.body.appendChild(textarea);
                textarea.select();
                try {
                    document.execCommand('copy');
                } catch (e) {
                    console.error('Fallback copy failed:', e);
                } finally {
                    document.body.removeChild(textarea);
                }
            }
        }

        // Enhanced Typing indicator
        function showTypingIndicator() {
            const indicator = document.createElement('div');
            indicator.className = 'typing-indicator';
            indicator.id = 'typing-indicator';
            indicator.innerHTML = `
                <div class="typing-text">AI is thinking</div>
                <div class="typing-dots">
                    <span class="loading"></span>
                    <span class="loading"></span>
                    <span class="loading"></span>
                </div>
            `;
            chatMessages.appendChild(indicator);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        function hideTypingIndicator() {
            const indicator = document.getElementById('typing-indicator');
            if (indicator) indicator.remove();
        }

        // Chat list visibility
        function showChatList() {
            chatListContainer.classList.remove('hidden');
            if (window.innerWidth <= 768)
                isChatListVisible = true;
            openChatListButton.style.display = 'none';
            // Remove the line that modifies chatContainer class
        }

        function hideChatList() {
            chatListContainer.classList.add('hidden');
            chatListOverlay.classList.remove('show');
            isChatListVisible = false;
            openChatListButton.style.display = 'block';
            // Remove the line that modifies chatContainer class
        }

        // Responsive behavior
        function setupResponsiveBehavior() {
            if (window.innerWidth <= 768) {
                hideChatList();
            } else {
                showChatList();
            }
        }

        // Error toast
        function showErrorToast(message) {
            const toast = document.createElement('div');
            toast.textContent = message;
            toast.style.position = 'fixed';
            toast.style.bottom = '20px';
            toast.style.right = '20px';
            toast.style.backgroundColor = '#ff4444';
            toast.style.color = 'white';
            toast.style.padding = '10px 20px';
            toast.style.borderRadius = '5px';
            toast.style.zIndex = '1000';
            document.body.appendChild(toast);
            setTimeout(() => {
                toast.style.opacity = '0';
                toast.style.transition = 'opacity 0.5s';
                setTimeout(() => toast.remove(), 500);
            }, 3000);
        }

        // Settings management
        function loadSettingsValuesToPopup() {
            themeSelect.value = currentSettings.theme;
            fontSizeInput.value = currentSettings.fontSize;
            fontSizeValue.textContent = `${currentSettings.fontSize}px`;
            modelSelect.value = currentSettings.model;
            temperatureInput.value = currentSettings.temperature * 100;
            temperatureValue.textContent = currentSettings.temperature.toFixed(1);
        }

        function saveSettings() {
            const settings = {
                theme: themeSelect.value,
                fontSize: parseInt(fontSizeInput.value),
                model: modelSelect.value,
                temperature: parseFloat((temperatureInput.value / 100).toFixed(1))
            };
            cancelSettingsButton.disabled = true;
            saveSettingsButton.classList.add('saving');
            settingsPopup.classList.add('saving');
            fetch('/api/save-settings', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(settings)
            })
                .then(response => response.ok ? response.json() : Promise.reject('Failed to save settings'))
                .then(data => {
                    cancelSettingsButton.disabled = false;
                    saveSettingsButton.classList.remove('saving');
                    settingsPopup.classList.remove('saving');
                    if (data.success) {
                        currentSettings = settings;
                        applySettings();
                        closeSettings();
                    } else {
                        showErrorToast('Failed to save settings: ' + data.message);
                    }
                })
                .catch(error => {
                    cancelSettingsButton.disabled = false;
                    saveSettingsButton.classList.remove('saving');
                    settingsPopup.classList.remove('saving');
                    console.error('Error saving settings:', error);
                    showErrorToast('Error saving settings. Please try again.');
                });
        }

        function closeSettings() {
            settingsPopup.classList.remove('show');
            settingsOverlay.classList.remove('show');
        }

        function applySettings() {
            document.body.classList.remove('light-theme', 'dark-theme', 'sepia-theme', 'contrast-theme');
            document.body.classList.add(`${currentSettings.theme}-theme`);
            document.documentElement.style.setProperty('--base-font-size', `${currentSettings.fontSize}px`);
        }

        function updateSendButtonState() {
            const isDisabled = chatInput.value.trim() === '' || isWaitingForResponse;
            sendButton.classList.toggle('disabled', isDisabled);
            sendButton.disabled = isDisabled;
        }

        // Initialize
        document.addEventListener('DOMContentLoaded', () => {
            setupEventListeners();
            handleMobileViewport();
            handleVirtualKeyboard();
            fetchChatHistoryList(1); // Start with page 1
            setupScrollListener(); // Add this line
            setupResponsiveBehavior();
            if (currentChatId && currentChatId !== 'null') {
                loadChat(currentChatId);
            } else {
                startNewChat();
            }
            applySettings();
            updateSendButtonState();
        });

        window.deleteChat = deleteChat;
    </script>
</body>

</html>