<!DOCTYPE html>
<html lang="en">
<head>
    <title>Chat Application</title>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="icon" type="image/x-icon" href="/Assets/Images/dgicon.svg">
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.15/codemirror.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.15/theme/monokai.min.css">
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <style>
        /* Root variables for consistent theming */
        :root {
            --base-font-size: 16px;
            --primary-color: #4caf50;
            --secondary-color: #2196f3;
            --danger-color: #f44336;
            --main-border-color: #3d444d;
            --transition-duration: 0.3s;
            --shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        /* Theme-specific variables */
        .dark-theme {
            --bg-color: #0d1117;
            --text-color: #d4d4d4;
            --header-bg: #151b23;
            --border-color: #555;
            --input-bg: #1e252f;
            --user-message-bg: #2d3748;
            --ai-message-bg: #1e252f;
            --ai-message-text: #d4d4d4;
            --user-profile-color: #ffffff;
        }

        .light-theme {
            --bg-color: #f5f5f5;
            --text-color: #333333;
            --header-bg: #ffffff;
            --border-color: #e0e0e0;
            --input-bg: #ffffff;
            --user-message-bg: #e6ffed;
            --ai-message-bg: #e0f7fa;
            --ai-message-text: #333333;
            --user-profile-color: #666666;
        }

        .sepia-theme {
            --bg-color: #f8f4e8;
            --text-color: #5e5245;
            --header-bg: #e8e0d4;
            --border-color: #d2c9bc;
            --input-bg: #f2e8cf;
            --user-message-bg: #d4e6d4;
            --ai-message-bg: #f2e8cf;
            --ai-message-text: #5e5245;
            --user-profile-color: #666666;
        }

        .contrast-theme {
            --bg-color: #000000;
            --text-color: #ffffff;
            --header-bg: #090909;
            --border-color: #555555;
            --input-bg: #333333;
            --user-message-bg: #ffffff;
            --ai-message-bg: #333333;
            --ai-message-text: #ffffff;
            --user-profile-color: #ffffff;
        }

        /* Reset and base styles */
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        html, body {
            height: 100%;
            font-family: 'Roboto', sans-serif;
            background-color: var(--bg-color);
            color: var(--text-color);
            display: flex;
            width: 100%;
            font-size: var(--base-font-size);
            line-height: 1.5;
        }

        /* Button styles */
        .btn {
            padding: 0.5rem 1rem;
            border-radius: 2rem;
            font-size: 0.875rem;
            font-weight: 600;
            color: #ffffff;
            border: none;
            cursor: pointer;
            background: var(--primary-color);
            text-align: center;
            transition: all var(--transition-duration) ease;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            box-shadow: var(--shadow);
        }

        .btn:hover, .btn:focus {
            filter: brightness(1.1);
            box-shadow: 0 6px 12px rgba(76, 175, 80, 0.3);
        }

        .btn-edit { background: #007bff; }
        .btn-save { background: #28a745; }
        .btn-cancel { background: #6c757d; }
        .btn-danger { background: #dc3545; }

        /* Chat list container */
        .chat-list-container {
            flex: 0 0 250px;
            max-width: 300px;
            background-color: var(--header-bg);
            border-right: 1px solid var(--border-color);
            padding: 1rem;
            display: flex;
            flex-direction: column;
            overflow-y: auto;
            transition: transform var(--transition-duration) ease-in-out, opacity var(--transition-duration) ease-in-out;
            position: relative;
            z-index: 10;
            box-shadow: var(--shadow);
        }

        .chat-list-container.hidden {
            transform: translateX(-100%);
            opacity: 0;
            pointer-events: none;
        }

        @media (max-width: 768px) {
            .chat-list-container {
                width: 80%;
                position: fixed;
                height: 100vh;
                z-index: 1000;
                border-radius: 0 1rem 1rem 0;
            }
        }

        /* Chat list header */
        .chat-list-header {
            color: var(--text-color);
            font-weight: bold;
            margin-bottom: 1rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.5rem 0;
        }

        .chat-list-header button {
            background-color: var(--primary-color);
            color: #ffffff;
            border: none;
            padding: 0.5rem;
            border-radius: 50%;
            cursor: pointer;
            transition: background-color var(--transition-duration) ease, transform 0.2s ease;
            box-shadow: var(--shadow);
        }

        .chat-list-header button:hover {
            background-color: #45a049;
        }

        /* Chat list items */
        .chat-list {
            list-style: none;
            flex-grow: 1;
            overflow-y: auto;
        }

        .chat-list-item {
            background-color: var(--input-bg);
            border: 1px solid var(--border-color);
            padding: 0.75rem;
            margin-bottom: 0.5rem;
            border-radius: 0.75rem;
            cursor: pointer;
            display: flex;
            justify-content: space-between;
            align-items: center;
            color: var(--text-color);
            transition: all var(--transition-duration) ease;
            box-shadow: var(--shadow);
        }

        .chat-list-item:hover {
            border-color: var(--secondary-color);
            background: linear-gradient(145deg, var(--input-bg), var(--border-color));
            transform: translateY(-2px);
        }

        .chat-list-item button {
            background-color: var(--danger-color);
            color: #ffffff;
            border: none;
            border-radius: 50%;
            padding: 0.25rem;
            cursor: pointer;
            opacity: 0;
            transition: opacity 0.2s ease;
            box-shadow: var(--shadow);
        }

        .chat-list-item:hover button {
            opacity: 1;
        }

        /* Chat container */
        .chat-container {
            display: flex;
            flex-direction: column;
            height: 100%;
            width: calc(100% - 250px);
            transition: width var(--transition-duration) ease-in-out;
            background: var(--bg-color);
        }

        .chat-container.full {
            width: 100%;
        }

        /* Chat header */
        .chat-header {
            background-color: var(--header-bg);
            padding: 1rem;
            border-bottom: 1px solid var(--border-color);
            display: flex;
            justify-content: space-between;
            align-items: center;
            position: sticky;
            top: 0;
            z-index: 5;
            box-shadow: var(--shadow);
        }

        .chat-header-title {
            font-size: 1.5rem;
            font-weight: 700;
            color: var(--text-color);
            background: linear-gradient(to right, var(--primary-color), var(--secondary-color));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .chat-header-title a {
            color: var(--secondary-color);
            text-decoration: none;
        }

        .chat-header-title a:hover {
            text-decoration: underline;
        }

        .chat-header button {
            background-color: var(--primary-color);
            color: #ffffff;
            border: none;
            border-radius: 50%;
            padding: 0.5rem;
            cursor: pointer;
            transition: all 0.2s ease;
            box-shadow: var(--shadow);
        }

        .chat-header button:hover {
            background-color: #45a049;
            transform: scale(1.1);
        }

        /* Chat content */
        .chat-content {
            flex-grow: 1;
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }

        /* Chat messages */
        .chat-messages {
            flex-grow: 1;
            overflow-y: auto;
            padding: 1.5rem;
            background: var(--bg-color);
        }

        /* Chat input */
        .chat-input-container {
            padding: 1rem;
            background: var(--header-bg);
            border-top: 1px solid var(--border-color);
            box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.05);
        }

        .chat-input-form {
            display: flex;
            gap: 0.75rem;
            background: var(--input-bg);
            padding: 0.5rem;
            border-radius: 2rem;
            box-shadow: var(--shadow);
            transition: box-shadow 0.3s ease;
        }

        .chat-input-form:hover {
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
        }

        .chat-input {
            flex-grow: 1;
            padding: 0.75rem 1rem;
            border: none;
            border-radius: 1.5rem;
            background: var(--input-bg);
            color: var(--text-color);
            font-size: 1rem;
            transition: all 0.3s ease;
            box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.05);
        }

        .chat-input:focus {
            outline: none;
            background: var(--bg-color);
            box-shadow: 0 0 0 3px rgba(76, 175, 80, 0.3);
        }

        .chat-input::placeholder {
            color: var(--text-color);
            opacity: 0.6;
        }

        .send-button {
            padding: 0.75rem;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: #ffffff;
            border: none;
            border-radius: 50%;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: var(--shadow);
        }

        .send-button:hover {
            background: linear-gradient(135deg, #45a049, #1976d2);
            transform: scale(1.05);
        }

        .send-button.disabled {
            background: #ccc;
            cursor: not-allowed;
            box-shadow: none;
            transform: none;
        }

        /* Messages */
        .message {
            margin-bottom: 1.5rem;
            display: flex;
            opacity: 0;
            transform: translateY(20px);
            transition: opacity var(--transition-duration) ease, transform var(--transition-duration) ease;
        }

        .message.show {
            opacity: 1;
            transform: translateY(0);
        }

        .user-message {
            justify-content: flex-end;
        }

        .ai-message {
            justify-content: flex-start;
        }

        .message-bubble {
            padding: 1rem 1.5rem;
            border-radius: 1.5rem;
            max-width: 70%;
            word-wrap: break-word;
            line-height: 1.6;
            background: var(--user-message-bg);
            color: var(--text-color);
            box-shadow: var(--shadow);
            position: relative;
            overflow: hidden;
        }

        .user-message .message-bubble {
            background: linear-gradient(135deg, var(--user-message-bg), var(--primary-color));
            color: #ffffff;
        }

        .ai-message .message-bubble {
            background: linear-gradient(135deg, var(--ai-message-bg), var(--secondary-color));
            color: var(--ai-message-text);
        }

        /* Typing indicator */
        .typing-indicator {
            display: flex;
            align-items: center;
            margin-bottom: 1rem;
            color: var(--text-color);
            font-style: italic;
        }

        @keyframes pulse {
            0%, 100% { opacity: 0.6; }
            50% { opacity: 1; }
        }

        .loading {
            display: inline-block;
            width: 0.75rem;
            height: 0.75rem;
            border-radius: 50%;
            background-color: var(--primary-color);
            animation: pulse 1.5s infinite ease-in-out;
            margin-left: 0.5rem;
        }

        /* Code blocks */
        pre {
            font-family: 'Consolas', monospace;
            background: var(--input-bg);
            padding: 1rem;
            border-radius: 0.75rem;
            overflow-x: auto;
            line-height: 1.5;
            margin: 0.5rem 0;
            box-shadow: var(--shadow);
            position: relative;
        }

        pre code {
            color: var(--text-color);
        }

        .code-copy-button {
            position: absolute;
            top: 0.5rem;
            right: 0.5rem;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: #ffffff;
            border: none;
            border-radius: 0.5rem;
            padding: 0.25rem 0.5rem;
            cursor: pointer;
            opacity: 0;
            transition: opacity 0.2s ease, transform 0.2s ease;
            box-shadow: var(--shadow);
        }

        pre:hover .code-copy-button {
            opacity: 1;
        }

        .code-copy-button:hover {
            transform: scale(1.1);
        }

        /* Settings popup */
        .settings-popup {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: var(--header-bg);
            border-radius: 1rem;
            box-shadow: 0 8px 24px rgba(0, 0, 0, 0.2);
            z-index: 1001;
            display: none;
            width: 90%;
            max-width: 600px;
            max-height: 90vh;
            overflow-y: auto;
        }

        .settings-popup.show {
            display: block;
        }

        .settings-header {
            padding: 1rem;
            border-bottom: 1px solid var(--border-color);
            color: var(--text-color);
            font-weight: bold;
            background: var(--header-bg);
            position: sticky;
            top: 0;
            z-index: 1;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .settings-tabs {
            display: flex;
            gap: 0.5rem;
            padding: 0.5rem 1rem;
            border-bottom: 1px solid var(--border-color);
            background: var(--header-bg);
            position: sticky;
            top: 3.5rem;
            z-index: 1;
        }

        .settings-tab {
            padding: 0.75rem 1rem;
            background: none;
            border: none;
            border-bottom: 3px solid transparent;
            color: var(--text-color);
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            transition: all 0.3s ease;
        }

        .settings-tab.active {
            color: var(--primary-color);
            border-bottom-color: var(--primary-color);
            font-weight: bold;
        }

        .settings-tab:hover {
            color: var(--secondary-color);
        }

        .settings-content {
            padding: 1.5rem;
            display: none;
        }

        .settings-content.active {
            display: block;
        }

        .settings-group {
            margin-bottom: 1.5rem;
        }

        .settings-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: var(--text-color);
        }

        .account-info {
            background: var(--input-bg);
            padding: 1rem;
            border-radius: 0.75rem;
            color: var(--text-color);
            box-shadow: var(--shadow);
        }

        /* Dropdowns */
        .settings-dropdown select {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid var(--border-color);
            border-radius: 2rem;
            background: var(--input-bg);
            color: var(--text-color);
            cursor: pointer;
            box-shadow: var(--shadow);
        }

        .settings-dropdown select:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(76, 175, 80, 0.2);
        }

        /* Range inputs */
        input[type="range"] {
            width: 100%;
            margin: 0.5rem 0;
            appearance: none;
            background: var(--border-color);
            height: 0.25rem;
            border-radius: 0.125rem;
            outline: none;
            transition: background 0.3s ease;
        }

        input[type="range"]::-webkit-slider-thumb {
            appearance: none;
            width: 1rem;
            height: 1rem;
            border-radius: 50%;
            background: var(--primary-color);
            cursor: pointer;
            transition: background 0.3s ease, transform 0.2s ease;
        }

        input[type="range"]::-webkit-slider-thumb:hover {
            background: #007bff;
            transform: scale(1.2);
        }

        input[type="range"]::-moz-range-thumb {
            width: 1rem;
            height: 1rem;
            border-radius: 50%;
            background: var(--primary-color);
            cursor: pointer;
            transition: background 0.3s ease, transform 0.2s ease;
        }

        input[type="range"]::-moz-range-thumb:hover {
            background: #007bff;
            transform: scale(1.2);
        }

        /* Settings footer */
        .settings-footer {
            display: flex;
            justify-content: flex-end;
            gap: 0.5rem;
            padding: 1rem;
            border-top: 1px solid var(--border-color);
            background: var(--header-bg);
        }

        /* Scroll down button */
        .scroll-down-btn {
            position: fixed;
            bottom: 5rem;
            right: 50%;
            transform: translateX(50%);
            width: 2rem;
            height: 2rem;
            background: linear-gradient(145deg, var(--primary-color), var(--border-color));
            border-radius: 50%;
            display: none;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            box-shadow: var(--shadow);
            transition: all var(--transition-duration) ease;
        }

        .scroll-down-btn:hover {
            background: linear-gradient(145deg, #45a049, var(--border-color));
        }

        /* Overlays */
        .settings-popup-overlay,
        .chat-list-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            z-index: 999;
            display: none;
            backdrop-filter: blur(2px);
        }

        .settings-popup-overlay.show,
        .chat-list-overlay.show {
            display: block;
        }

        /* Saving animation */
        #save-settings.saving::after {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            margin: -0.625rem;
            width: 1.25rem;
            height: 1.25rem;
            border-radius: 50%;
            border: 2px solid #ffffff;
            border-color: #ffffff transparent #ffffff transparent;
            animation: spin 1.2s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .settings-popup.saving * {
            pointer-events: none;
            opacity: 0.7;
        }

        .settings-popup.saving .settings-header button,
        .settings-popup.saving #cancel-settings {
            pointer-events: auto;
            opacity: 1;
        }
    </style>
</head>
<body class="{{settings.theme}}-theme">
    <!-- Chat History Sidebar -->
    <aside class="chat-list-container hidden" id="chat-list-container">
        <div class="chat-list-header">
            <span>Chat History</span>
            <button id="new-chat-button" title="Start new chat">
                <i class="fas fa-plus"></i>
            </button>
            <button id="close-chat-list-button" aria-label="Close Chat List">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <ul class="chat-list" id="chat-list"></ul>
    </aside>
    <div class="chat-list-overlay" id="chat-list-overlay"></div>

    <!-- Main Chat Area -->
    <main class="chat-container full" id="chat-container">
        <header class="chat-header">
            <button id="open-chat-list-button" aria-label="Open Chat List">
                <i class="fas fa-bars"></i>
            </button>
            <div class="chat-header-title">AI Chat Bot<span> by <a href="https://mbktechstudio.com">MBK Tech Studio</a></span></div>
            <button id="settings-button" aria-label="Settings">
                <i class="fas fa-user-circle"></i>
            </button>
        </header>
        <section class="chat-content">
            <div class="chat-messages" id="chat-messages"></div>
            <div id="scroll-down-btn" class="scroll-down-btn">
                <i class="fas fa-arrow-down"></i>
            </div>
            <div class="chat-input-container">
                <form class="chat-input-form" id="chat-form">
                    <input type="text" class="chat-input" id="chat-input" placeholder="Type your message..." autocomplete="off" aria-label="Chat input">
                    <button type="submit" class="send-button" id="send-button"><i class="fas fa-paper-plane"></i></button>
                </form>
            </div>
            <div class="settings-popup" id="settings-popup">
                <div class="settings-header">
                    <h3>Settings</h3>
                    <button id="close-settings-button" aria-label="Close settings">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <div class="settings-tabs" role="tablist">
                    <button class="settings-tab active" data-tab="bot-settings" role="tab" aria-selected="true">
                        <i class="fas fa-robot"></i> Bot Settings
                    </button>
                    <button class="settings-tab" data-tab="appearance" role="tab" aria-selected="false">
                        <i class="fas fa-palette"></i> Appearance
                    </button>
                    <button class="settings-tab" data-tab="account" role="tab" aria-selected="false">
                        <i class="fas fa-user"></i> Account
                    </button>
                </div>
                <div class="settings-content active" data-tab-content="bot-settings" role="tabpanel">
                    <div class="settings-group">
                        <label for="model-select">AI Model</label>
                        <div class="settings-dropdown">
                            <select id="model-select">
                                <option value="gemini/gemini-2.0-flash">Gemini 2.0 Flash</option>
                                <option value="gemini/gemini-2.0-flash-lite">Gemini 2.0 Flash Lite</option>
                                <option value="gemini/gemini-1.5-flash">Gemini 1.5 Flash</option>
                                <option value="gemini/gemini-1.5-flash-8b">Gemini 1.5 Flash 8B</option>
                                <option value="gemini/gemini-1.5-pro">Gemini 1.5 Pro</option>
                                <option value="mallow/mallow-t1">Mallow-T1</option>
                                <option value="nvidia/llama-3.1-nemotron-nano-8b-v1">Llama-3.1-Nemotron-Nano-8B-v1</option>
                                <option value="nvidia/llama-3.3-nemotron-super-49b-v1">Llama-3.3-Nemotron-Super-49B-v1</option>
                            </select>
                        </div>
                    </div>
                    <div class="settings-group">
                        <label for="temperature">Response Creativity</label>
                        <input type="range" id="temperature" min="0" max="200" value="{{settings.temperature}}">
                        <span id="temperature-value">{{settings.temperature_value}}</span>
                    </div>
                </div>
                <div class="settings-content" data-tab-content="appearance" role="tabpanel">
                    <div class="settings-group">
                        <label for="theme-select">Theme</label>
                        <div class="settings-dropdown">
                            <select id="theme-select">
                                <option value="dark" {{#if (eq settings.theme "dark")}}selected{{/if}}>Dark</option>
                                <option value="light" {{#if (eq settings.theme "light")}}selected{{/if}}>Light</option>
                                <option value="sepia" {{#if (eq settings.theme "sepia")}}selected{{/if}}>Sepia</option>
                                <option value="contrast" {{#if (eq settings.theme "contrast")}}selected{{/if}}>Contrast</option>
                                <option value="system" {{#if (eq settings.theme "system")}}selected{{/if}}>System Default</option>
                            </select>
                        </div>
                    </div>
                    <div class="settings-group">
                        <label for="font-size">Font Size</label>
                        <input type="range" id="font-size" min="12" max="24" value="{{settings.font_size}}">
                        <span id="font-size-value">{{settings.font_size}}px</span>
                    </div>
                </div>
                <div class="settings-content" data-tab-content="account" role="tabpanel">
                    <div class="settings-group">
                        <label>Account Information</label>
                        <div class="account-info">
                            <p>User: <span id="headerProfileUserName">{{UserName}}</span></p>
                        </div>
                    </div>
                    <div class="settings-group">
                        <label>Subscription Details</label>
                        <div class="account-info">
                            {{#if (eq role "SuperAdmin")}}
                                <p>Plan: <span id="userSubscriptionPlan">MBK Tech Studio Team</span></p>
                                <p>Messages Per Day: Unlimited</p>
                            {{else}}
                                <p>Plan: <span id="userSubscriptionPlan">Free</span></p>
                                <p>Messages Per Day: <span id="messagesUsed">{{settings.messageCount}}</span>/<span id="messagesPerDay">{{#if settings.dailyLimit}}{{settings.dailyLimit}}{{else}}Unlimited{{/if}}</span></p>
                            {{/if}}
                        </div>
                    </div>
                    <a href="https://portal.mbktechstudio.com/user/settings" target="_blank" class="btn btn-save"><i class="fas fa-arrow-up"></i> Upgrade Plan</a>
                    <a href="https://portal.mbktechstudio.com/user/settings" target="_blank" class="btn btn-cancel"><i class="fas fa-gear"></i> Account Settings</a>
                    <button id="logout-button" class="btn btn-danger"><i class="fas fa-sign-out-alt"></i> Logout</button>
                </div>
                <div class="settings-footer">
                    <a id="save-settings" class="btn btn-save"><i class="fas fa-save" aria-hidden="true"></i> Save Settings</a>
                    <a id="cancel-settings" class="btn btn-cancel">Cancel</a>
                </div>
            </div>
            <div class="settings-popup-overlay" id="settings-popup-overlay"></div>
        </section>
    </main>

    <script>
        // DOM Elements
        const chatMessages = document.getElementById('chat-messages');
        const chatForm = document.getElementById('chat-form');
        const chatInput = document.getElementById('chat-input');
        const sendButton = document.getElementById('send-button');
        const newChatButton = document.getElementById('new-chat-button');
        const chatList = document.getElementById('chat-list');
        const chatListContainer = document.getElementById('chat-list-container');
        const openChatListButton = document.getElementById('open-chat-list-button');
        const closeChatListButton = document.getElementById('close-chat-list-button');
        const chatContainer = document.getElementById('chat-container');
        const settingsButton = document.getElementById('settings-button');
        const settingsPopup = document.getElementById('settings-popup');
        const closeSettingsButton = document.getElementById('close-settings-button');
        const cancelSettingsButton = document.getElementById('cancel-settings');
        const saveSettingsButton = document.getElementById('save-settings');
        const settingsTabs = document.querySelectorAll('.settings-tab');
        const settingsContents = document.querySelectorAll('.settings-content');
        const modelSelect = document.getElementById('model-select');
        const themeSelect = document.getElementById('theme-select');
        const temperatureInput = document.getElementById('temperature');
        const temperatureValue = document.getElementById('temperature-value');
        const fontSizeInput = document.getElementById('font-size');
        const fontSizeValue = document.getElementById('font-size-value');
        const settingsOverlay = document.getElementById('settings-popup-overlay');
        const chatListOverlay = document.getElementById('chat-list-overlay');
        const scrollDownBtn = document.getElementById('scroll-down-btn');

        // State variables
        let currentChatId = '{{chatId}}' || null;
        let isChatListVisible = window.innerWidth > 768;
        let isWaitingForResponse = false;
        let currentSettings = {
            model: '{{settings.ai_model}}',
            theme: '{{settings.theme}}',
            temperature: {{settings.temperature}},
            fontSize: {{settings.font_size}},
            messageCount: {{settings.messageCount}},
            dailyLimit: {{settings.dailyLimit}}
        };

        // Scroll button visibility
        function updateScrollDownBtnVisibility() {
            const threshold = 20;
            if (chatMessages.scrollHeight - chatMessages.scrollTop - chatMessages.clientHeight > threshold) {
                scrollDownBtn.style.display = 'flex';
            } else {
                scrollDownBtn.style.display = 'none';
            }
        }

        // Setup event listeners
        function setupEventListeners() {
            chatForm.addEventListener('submit', handleFormSubmit);
            chatInput.addEventListener('keydown', (e) => {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    handleFormSubmit(e);
                }
            });
            chatInput.addEventListener('input', updateSendButtonState);
            openChatListButton.addEventListener('click', showChatList);
            closeChatListButton.addEventListener('click', hideChatList);
            chatListOverlay.addEventListener('click', hideChatList);
            settingsButton.addEventListener('click', () => {
                settingsPopup.classList.add('show');
                settingsOverlay.classList.add('show');
                loadSettingsValuesToPopup();
            });
            closeSettingsButton.addEventListener('click', closeSettings);
            cancelSettingsButton.addEventListener('click', closeSettings);
            saveSettingsButton.addEventListener('click', saveSettings);
            settingsTabs.forEach(tab => {
                tab.addEventListener('click', () => {
                    settingsTabs.forEach(t => {
                        t.classList.remove('active');
                        t.setAttribute('aria-selected', 'false');
                    });
                    settingsContents.forEach(c => c.classList.remove('active'));
                    tab.classList.add('active');
                    tab.setAttribute('aria-selected', 'true');
                    document.querySelector(`.settings-content[data-tab-content="${tab.dataset.tab}"]`).classList.add('active');
                });
            });
            temperatureInput.addEventListener('input', () => {
                const tempValue = (temperatureInput.value / 100).toFixed(1);
                temperatureValue.textContent = tempValue;
            });
            fontSizeInput.addEventListener('input', () => {
                fontSizeValue.textContent = `${fontSizeInput.value}px`;
            });
            settingsOverlay.addEventListener('click', (e) => {
                if (e.target === settingsOverlay) closeSettings();
            });
            newChatButton.addEventListener('click', startNewChat);
            window.addEventListener('resize', setupResponsiveBehavior);
            document.getElementById('logout-button').addEventListener('click', () => {
                fetch('/api/logout', { method: 'POST' })
                    .then(() => window.location.href = '/login')
                    .catch(err => console.error('Logout failed:', err));
            });
            chatMessages.addEventListener('scroll', updateScrollDownBtnVisibility);
            scrollDownBtn.addEventListener('click', () => {
                chatMessages.scrollTop = chatMessages.scrollHeight;
                updateScrollDownBtnVisibility();
            });
        }

        // Fetch chat history
        function fetchChatHistoryList() {
            fetch('/api/chat/histories')
                .then(response => response.ok ? response.json() : Promise.reject('Failed to fetch chat histories'))
                .then(histories => renderChatList(histories))
                .catch(error => {
                    console.error("Error fetching chat histories:", error);
                    showErrorToast("Failed to load chat history");
                });
        }

        // Render chat list
        function renderChatList(histories) {
            chatList.innerHTML = '';
            if (histories.length === 0) {
                const emptyItem = document.createElement('li');
                emptyItem.textContent = 'No chat history yet';
                emptyItem.style.padding = '10px';
                emptyItem.style.color = 'var(--text-color)';
                emptyItem.style.textAlign = 'center';
                chatList.appendChild(emptyItem);
                return;
            }
            histories.forEach(history => {
                const listItem = document.createElement('li');
                listItem.className = 'chat-list-item';
                listItem.dataset.chatId = history.id;
                listItem.innerHTML = `
                    <span>Chat created ${history.created_at}</span>
                    <button title="Delete chat" onclick="event.stopPropagation(); deleteChat('${history.id}')">
                        <i class="fas fa-trash"></i>
                    </button>
                `;
                listItem.addEventListener('click', () => {
                    window.location.href = `/chatbot/${history.id}`;
                });
                chatList.appendChild(listItem);
            });
        }

        // Load specific chat
        function loadChat(chatId) {
            currentChatId = chatId;
            chatMessages.innerHTML = '';
            fetch(`/api/chat/histories/${chatId}`)
                .then(response => response.ok ? response.json() : Promise.reject('Failed to load chat'))
                .then(chatHistory => {
                    if (chatHistory?.conversation_history) {
                        chatHistory.conversation_history.forEach(message => {
                            addMessage(message.parts[0].text, message.role === 'user' ? 'user' : 'ai');
                        });
                    }
                })
                .catch(error => {
                    console.error("Error loading chat:", error);
                    showErrorToast("Failed to load chat");
                });
        }

        // Start new chat
        function startNewChat() {
            currentChatId = null;
            chatMessages.innerHTML = '';
            chatInput.value = '';
            window.history.pushState({}, '', '/chatbot');
            updateSendButtonState();
        }

        // Delete chat
        function deleteChat(chatId) {
            if (!confirm('Are you sure you want to delete this chat?')) return;
            fetch(`/api/chat/clear-history/${chatId}`, { method: 'POST' })
                .then(response => response.ok ? response.json() : Promise.reject('Failed to delete chat'))
                .then(() => {
                    fetchChatHistoryList();
                    if (currentChatId === chatId) startNewChat();
                })
                .catch(error => {
                    console.error("Error deleting chat:", error);
                    showErrorToast("Failed to delete chat");
                });
        }

        // Handle form submission
        function handleFormSubmit(e) {
            e.preventDefault();
            const messageText = chatInput.value.trim();
            if (!messageText || isWaitingForResponse) return;
            addMessage(messageText, 'user');
            chatInput.value = '';
            isWaitingForResponse = true;
            showTypingIndicator();
            updateSendButtonState();
            const payload = { message: messageText };
            if (currentChatId) payload.chatId = currentChatId;
            fetch('/api/bot-chat', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            })
                .then(response => response.ok ? response.json() : response.json().then(err => Promise.reject(err.message || "Unknown error")))
                .then(data => {
                    if (data.aiResponse) addMessage(data.aiResponse, 'ai');
                    if (data.newChatId && !currentChatId) {
                        currentChatId = data.newChatId;
                        fetchChatHistoryList();
                    }
                })
                .catch(error => {
                    console.error("Error calling API:", error);
                    if (error === "Daily message limit reached.") {
                        addMessage("You have reached your daily message limit. Please try again later or upgrade your plan.", 'ai');
                    } else {
                        addMessage(`Error getting AI response: ${error}`, 'ai');
                    }
                })
                .finally(() => {
                    isWaitingForResponse = false;
                    hideTypingIndicator();
                    updateSendButtonState();
                });
        }

        // Add message to chat
        function addMessage(text, sender) {
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${sender}-message`;
            const content = sender === 'ai' ? marked.parse(text) : text;
            messageDiv.innerHTML = `<div class="message-bubble">${content}</div>`;
            if (sender === 'ai') {
                setTimeout(() => {
                    const codeBlocks = messageDiv.querySelectorAll('pre code');
                    codeBlocks.forEach((codeBlock) => {
                        const preElement = codeBlock.closest('pre');
                        if (preElement && !preElement.querySelector('.code-copy-button')) {
                            const copyButton = document.createElement('button');
                            copyButton.className = 'code-copy-button';
                            copyButton.setAttribute('aria-label', 'Copy code');
                            copyButton.title = 'Copy code';
                            copyButton.innerHTML = '<i class="fas fa-copy"></i>';
                            copyButton.addEventListener('click', (e) => {
                                e.stopPropagation();
                                const code = codeBlock.textContent;
                                copyToClipboard(code);
                                copyButton.innerHTML = '<i class="fas fa-check"></i>';
                                copyButton.style.background = 'linear-gradient(135deg, #45a049, #1976d2)';
                                setTimeout(() => {
                                    copyButton.innerHTML = '<i class="fas fa-copy"></i>';
                                    copyButton.style.background = 'linear-gradient(135deg, var(--primary-color), var(--secondary-color))';
                                }, 2000);
                            });
                            preElement.appendChild(copyButton);
                        }
                    });
                }, 0);
            }
            chatMessages.appendChild(messageDiv);
            setTimeout(() => messageDiv.classList.add('show'), 10);
            chatMessages.scrollTop = chatMessages.scrollHeight;
            updateScrollDownBtnVisibility();
        }

        // Copy to clipboard
        async function copyToClipboard(text) {
            try {
                await navigator.clipboard.writeText(text);
            } catch (err) {
                console.error('Copy failed:', err);
                const textarea = document.createElement('textarea');
                textarea.value = text;
                textarea.style.position = 'fixed';
                document.body.appendChild(textarea);
                textarea.select();
                try {
                    document.execCommand('copy');
                } catch (e) {
                    console.error('Fallback copy failed:', e);
                } finally {
                    document.body.removeChild(textarea);
                }
            }
        }

        // Typing indicator
        function showTypingIndicator() {
            const indicator = document.createElement('div');
            indicator.className = 'typing-indicator';
            indicator.id = 'typing-indicator';
            indicator.innerHTML = 'AI is typing <span class="loading"></span><span class="loading"></span><span class="loading"></span>';
            chatMessages.appendChild(indicator);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        function hideTypingIndicator() {
            const indicator = document.getElementById('typing-indicator');
            if (indicator) indicator.remove();
        }

        // Chat list visibility
        function showChatList() {
            chatListContainer.classList.remove('hidden');
            if (window.innerWidth <= 768) chatListOverlay.classList.add('show');
            isChatListVisible = true;
            openChatListButton.style.display = 'none';
            chatContainer.classList.remove('full');
        }

        function hideChatList() {
            chatListContainer.classList.add('hidden');
            chatListOverlay.classList.remove('show');
            isChatListVisible = false;
            openChatListButton.style.display = 'block';
            chatContainer.classList.add('full');
        }

        // Responsive behavior
        function setupResponsiveBehavior() {
            if (window.innerWidth <= 768) {
                hideChatList();
            } else {
                showChatList();
            }
        }

        // Error toast
        function showErrorToast(message) {
            const toast = document.createElement('div');
            toast.textContent = message;
            toast.style.position = 'fixed';
            toast.style.bottom = '20px';
            toast.style.right = '20px';
            toast.style.backgroundColor = '#ff4444';
            toast.style.color = 'white';
            toast.style.padding = '10px 20px';
            toast.style.borderRadius = '5px';
            toast.style.zIndex = '1000';
            document.body.appendChild(toast);
            setTimeout(() => {
                toast.style.opacity = '0';
                toast.style.transition = 'opacity 0.5s';
                setTimeout(() => toast.remove(), 500);
            }, 3000);
        }

        // Settings management
        function loadSettingsValuesToPopup() {
            themeSelect.value = currentSettings.theme;
            fontSizeInput.value = currentSettings.fontSize;
            fontSizeValue.textContent = `${currentSettings.fontSize}px`;
            modelSelect.value = currentSettings.model;
            temperatureInput.value = currentSettings.temperature * 100;
            temperatureValue.textContent = currentSettings.temperature.toFixed(1);
        }

        function saveSettings() {
            const settings = {
                theme: themeSelect.value,
                fontSize: parseInt(fontSizeInput.value),
                model: modelSelect.value,
                temperature: parseFloat((temperatureInput.value / 100).toFixed(1))
            };
            closeSettingsButton.disabled = true;
            cancelSettingsButton.disabled = true;
            saveSettingsButton.classList.add('saving');
            settingsPopup.classList.add('saving');
            fetch('/api/save-settings', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(settings)
            })
                .then(response => response.ok ? response.json() : Promise.reject('Failed to save settings'))
                .then(data => {
                    closeSettingsButton.disabled = false;
                    cancelSettingsButton.disabled = false;
                    saveSettingsButton.classList.remove('saving');
                    settingsPopup.classList.remove('saving');
                    if (data.success) {
                        currentSettings = settings;
                        applySettings();
                        closeSettings();
                    } else {
                        showErrorToast('Failed to save settings: ' + data.message);
                    }
                })
                .catch(error => {
                    closeSettingsButton.disabled = false;
                    cancelSettingsButton.disabled = false;
                    saveSettingsButton.classList.remove('saving');
                    settingsPopup.classList.remove('saving');
                    console.error('Error saving settings:', error);
                    showErrorToast('Error saving settings. Please try again.');
                });
        }

        function closeSettings() {
            settingsPopup.classList.remove('show');
            settingsOverlay.classList.remove('show');
        }

        function applySettings() {
            document.body.classList.remove('light-theme', 'dark-theme', 'sepia-theme', 'contrast-theme');
            document.body.classList.add(`${currentSettings.theme}-theme`);
            document.documentElement.style.setProperty('--base-font-size', `${currentSettings.fontSize}px`);
        }

        function updateSendButtonState() {
            const isDisabled = chatInput.value.trim() === '' || isWaitingForResponse;
            sendButton.classList.toggle('disabled', isDisabled);
            sendButton.disabled = isDisabled;
        }

        // Initialize
        document.addEventListener('DOMContentLoaded', () => {
            setupEventListeners();
            fetchChatHistoryList();
            setupResponsiveBehavior();
            if (currentChatId && currentChatId !== 'null') {
                loadChat(currentChatId);
            } else {
                startNewChat();
            }
            applySettings();
            updateSendButtonState();
        });

        window.deleteChat = deleteChat;
    </script>
</body>
</html>