<head>
  <link rel="stylesheet" href="/Assets/css/admin.css">
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
</head>

<div class="admin-container">
  <!-- Header Section -->
  <div class="admin-header">
    <div class="header-content">
      <div class="header-title">
        <h1 class="admin-title">
          <i class="fas fa-comments"></i>
          Chat Management
        </h1>
        <p class="admin-subtitle">Monitor and manage all chat conversations</p>
      </div>
      <div class="header-actions">
        <a href="/admin/dashboard" class="btn btn-outline back-link">
          <i class="fas fa-arrow-left"></i>
          Back to Dashboard
        </a>
      </div>
    </div>
  </div>

  <!-- Quick Stats Bar -->
  <div class="stats-bar">
    <div class="stat-item">
      <div class="stat-icon">
        <i class="fas fa-comments"></i>
      </div>
      <div class="stat-content">
        <div class="stat-value">{{pagination.totalCount}}</div>
        <div class="stat-label">Total Chats</div>
      </div>
    </div>
    <div class="stat-item">
      <div class="stat-icon">
        <i class="fas fa-message"></i>
      </div>
      <div class="stat-content">
        <div class="stat-value" id="avgMessages">-</div>
        <div class="stat-label">Avg Messages</div>
      </div>
    </div>
    <div class="stat-item">
      <div class="stat-icon">
        <i class="fas fa-users"></i>
      </div>
      <div class="stat-content">
        <div class="stat-value" id="uniqueUsers">-</div>
        <div class="stat-label">Unique Users</div>
      </div>
    </div>
    <div class="stat-item">
      <div class="stat-icon">
        <i class="fas fa-check-circle"></i>
      </div>
      <div class="stat-content">
        <div class="stat-value" id="selectedChats">0</div>
        <div class="stat-label">Selected</div>
      </div>
    </div>
  </div>

  <!-- Search and Filter Section -->
  <div class="control-panel">
    <div class="control-section filters">
      <h3><i class="fas fa-filter"></i> Search & Filter</h3>
      <form class="search-form" method="GET" action="/admin/chats">
        <div class="search-grid">
          <div class="search-field">
            <label for="usernameFilter">Username</label>
            <input type="text" id="usernameFilter" name="username" placeholder="Filter by username" value="{{usernameFilter}}" class="form-control">
          </div>

          <div class="search-field">
            <label for="modelFilter">AI Model</label>
            <select id="modelFilter" name="model" class="form-control">
              <option value="">All Models</option>
              {{#each availableModels}}
              <option value="{{this}}" {{#if (eq this ../selectedModel)}}selected{{/if}}>{{this}}</option>
              {{/each}}
            </select>
          </div>

          <div class="search-field">
            <label for="dateRangeSelect">Date Range</label>
            <select id="dateRangeSelect" name="dateRange" class="form-control">
              <option value="">All Dates</option>
              <option value="today" {{#if (eq selectedDateRange 'today')}}selected{{/if}}>Today</option>
              <option value="yesterday" {{#if (eq selectedDateRange 'yesterday')}}selected{{/if}}>Yesterday</option>
              <option value="week" {{#if (eq selectedDateRange 'week')}}selected{{/if}}>This Week</option>
              <option value="month" {{#if (eq selectedDateRange 'month')}}selected{{/if}}>This Month</option>
              <option value="custom" {{#if (eq selectedDateRange 'custom')}}selected{{/if}}>Custom Range</option>
            </select>
          </div>

          <div class="search-field date-range-inputs" id="customDateRange" style="display: {{#if (eq selectedDateRange 'custom')}}block{{else}}none{{/if}};">
            <label>Custom Range</label>
            <div class="date-range-row">
              <input type="date" name="startDate" value="{{startDate}}" class="form-control">
              <span>to</span>
              <input type="date" name="endDate" value="{{endDate}}" class="form-control">
            </div>
          </div>

          <div class="search-field">
            <label for="searchMessages">Search Messages</label>
            <div class="input-group">
              <input type="text" id="searchMessages" name="search" placeholder="Search in conversation..." value="{{searchQuery}}" class="form-control">
              <i class="fas fa-search"></i>
            </div>
          </div>

          <div class="search-field">
            <label for="messageLengthFilter">Message Count</label>
            <select id="messageLengthFilter" name="messageLength" class="form-control">
              <option value="">Any Length</option>
              <option value="short" {{#if (eq selectedMessageLength 'short')}}selected{{/if}}>Short (1-5 messages)</option>
              <option value="medium" {{#if (eq selectedMessageLength 'medium')}}selected{{/if}}>Medium (6-20 messages)</option>
              <option value="long" {{#if (eq selectedMessageLength 'long')}}selected{{/if}}>Long (21+ messages)</option>
            </select>
          </div>
        </div>

        <div class="search-actions">
          <button type="submit" class="btn btn-primary">
            <i class="fas fa-filter"></i> Apply Filters
          </button>
          <a href="/admin/chats" class="btn btn-secondary">
            <i class="fas fa-refresh"></i> Reset
          </a>
        </div>
      </form>
    </div>
    
    <!-- Bulk Actions & View Controls -->
    <div class="control-section actions">
      <h3><i class="fas fa-tasks"></i> Actions & View</h3>
      <div class="view-controls">
        <div class="view-toggle">
          <button class="view-btn active" data-view="table" id="tableViewBtn">
            <i class="fas fa-table"></i> Table
          </button>
          <button class="view-btn" data-view="cards" id="cardsViewBtn">
            <i class="fas fa-th-large"></i> Cards
          </button>
        </div>
        <div class="bulk-controls">
          <button class="btn btn-outline" id="bulkExportBtn" disabled>
            <i class="fas fa-download"></i> Export
          </button>
          <button class="btn btn-danger" id="bulkDeleteBtn" disabled>
            <i class="fas fa-trash"></i> Delete
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- Chats Table -->
  <div class="data-table-container">
    <div class="table-header">
      <h3><i class="fas fa-list"></i> Conversations</h3>
      <div class="table-controls">
        <select id="pageSizeSelect" onchange="changePageSize(this.value)">
          <option value="10">10 per page</option>
          <option value="20" selected>20 per page</option>
          <option value="50">50 per page</option>
          <option value="100">100 per page</option>
        </select>
      </div>
    </div>
    
    <!-- Table View -->
    <div class="table-wrapper" id="tableView">
      <table class="data-table">
        <thead>
          <tr>
            <th class="select-col">
              <label class="checkbox-container">
                <input type="checkbox" id="selectAllChats">
                <span class="checkmark"></span>
              </label>
            </th>
            <th>ID</th>
            <th>User</th>
            <th>Date</th>
            <th>Model</th>
            <th>Messages</th>
            <th>Temperature</th>
            <th>Preview</th>
            <th class="actions-col">Actions</th>
          </tr>
        </thead>
        <tbody>
          {{#each chats}}
          <tr class="chat-row" data-chat-id="{{this.id}}">
            <td class="select-col">
              <label class="checkbox-container">
                <input type="checkbox" class="chat-checkbox" value="{{this.id}}">
                <span class="checkmark"></span>
              </label>
            </td>
            <td>
              <span class="chat-id">#{{this.id}}</span>
            </td>
            <td>
              <div class="user-info">
                <span class="user-name">{{this.username}}</span>
              </div>
            </td>
            <td>
              <span class="date-text">{{formatDate this.created_at}}</span>
            </td>
            <td>
              <span class="model-badge">{{this.ai_model}}</span>
            </td>
            <td>
              <span class="count-badge">{{this.message_count}}</span>
            </td>
            <td>
              <span class="temp-badge">{{this.temperature}}Â°</span>
            </td>
            <td class="preview-col">
              <div class="message-preview" title="{{this.first_message_preview}}">
                {{truncate this.first_message_preview 50}}
              </div>
            </td>
            <td class="actions-col">
              <div class="action-buttons">
                <a href="/admin/chats/{{this.id}}" class="action-btn view" title="View Details">
                  <i class="fas fa-eye"></i>
                </a>
                <a href="/chatbot/{{this.id}}" class="action-btn edit" title="Open Chat">
                  <i class="fas fa-external-link-alt"></i>
                </a>
                <button class="action-btn delete" onclick="deleteChat({{this.id}})" title="Delete">
                  <i class="fas fa-trash"></i>
                </button>
              </div>
            </td>
          </tr>
          {{/each}}
        </tbody>
      </table>
    </div>

    <!-- Cards View -->
    <div class="cards-view hidden" id="cardsView">
      <div class="chat-cards-grid">
        {{#each chats}}
        <div class="chat-card" data-chat-id="{{this.id}}">
          <div class="chat-card-header">
            <div class="chat-card-checkbox">
              <label class="checkbox-container">
                <input type="checkbox" class="chat-checkbox-card" value="{{this.id}}">
                <span class="checkmark"></span>
              </label>
            </div>
            <div class="chat-card-id">#{{this.id}}</div>
            <div class="chat-card-date">{{formatDate this.created_at}}</div>
          </div>
          <div class="chat-card-body">
            <div class="chat-card-user">
              <i class="fas fa-user"></i>
              <span>{{this.username}}</span>
            </div>
            <div class="chat-card-meta">
              <span class="model-badge">{{this.ai_model}}</span>
              <span class="temp-badge">{{this.temperature}}Â°</span>
              <span class="count-badge">{{this.message_count}} msgs</span>
            </div>
            <div class="chat-card-preview">
              {{truncate this.first_message_preview 100}}
            </div>
          </div>
          <div class="chat-card-footer">
            <div class="card-actions">
              <a href="/admin/chats/{{this.id}}" class="card-action-btn primary">
                <i class="fas fa-eye"></i> View
              </a>
              <a href="/chatbot/{{this.id}}" class="card-action-btn secondary">
                <i class="fas fa-external-link-alt"></i>
              </a>
              <button class="card-action-btn danger" onclick="deleteChat({{this.id}})">
                <i class="fas fa-trash"></i>
              </button>
            </div>
          </div>
        </div>
        {{/each}}
      </div>
    </div>
  </div>

  <!-- Pagination -->
  <div class="pagination-wrapper">
    <div class="pagination-info">
      Showing {{add (multiply (subtract pagination.currentPage 1) pagination.pageSize) 1}} to 
      {{#if (lt (multiply pagination.currentPage pagination.pageSize) pagination.totalCount)}}
        {{multiply pagination.currentPage pagination.pageSize}}
      {{else}}
        {{pagination.totalCount}}
      {{/if}}
      of {{pagination.totalCount}} chats
    </div>
    <div class="pagination">
      {{#if (gt pagination.currentPage 1)}}
        <a href="?page=1&pageSize={{pagination.pageSize}}&username={{usernameFilter}}&model={{selectedModel}}&dateRange={{selectedDateRange}}&startDate={{startDate}}&endDate={{endDate}}&search={{searchQuery}}" 
          class="page-btn">
          <i class="fas fa-angle-double-left"></i>
        </a>
        <a href="?page={{subtract pagination.currentPage 1}}&pageSize={{pagination.pageSize}}&username={{usernameFilter}}&model={{selectedModel}}&dateRange={{selectedDateRange}}&startDate={{startDate}}&endDate={{endDate}}&search={{searchQuery}}" 
          class="page-btn">
          <i class="fas fa-angle-left"></i>
        </a>
      {{/if}}
      
      {{#each (range 1 pagination.totalPages)}}
        {{#if (and (gte this (subtract ../pagination.currentPage 2)) (lte this (add ../pagination.currentPage 2)))}}
          <a href="?page={{this}}&pageSize={{../pagination.pageSize}}&username={{../usernameFilter}}&model={{../selectedModel}}&dateRange={{../selectedDateRange}}&startDate={{../startDate}}&endDate={{../endDate}}&search={{../searchQuery}}" 
            class="page-btn {{#if (eq this ../pagination.currentPage)}}active{{/if}}">{{this}}</a>
        {{/if}}
      {{/each}}
      
      {{#if (lt pagination.currentPage pagination.totalPages)}}
        <a href="?page={{add pagination.currentPage 1}}&pageSize={{pagination.pageSize}}&username={{usernameFilter}}&model={{selectedModel}}&dateRange={{selectedDateRange}}&startDate={{startDate}}&endDate={{endDate}}&search={{searchQuery}}" 
          class="page-btn">
          <i class="fas fa-angle-right"></i>
        </a>
        <a href="?page={{pagination.totalPages}}&pageSize={{pagination.pageSize}}&username={{usernameFilter}}&model={{selectedModel}}&dateRange={{selectedDateRange}}&startDate={{startDate}}&endDate={{endDate}}&search={{searchQuery}}" 
          class="page-btn">
          <i class="fas fa-angle-double-right"></i>
        </a>
      {{/if}}
    </div>
  </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal" id="deleteModal">
  <div class="modal-content">
    <div class="modal-header">
      <h3><i class="fas fa-exclamation-triangle"></i> Confirm Delete</h3>
      <button class="close-btn" onclick="closeModal('deleteModal')">
        <i class="fas fa-times"></i>
      </button>
    </div>
    <div class="modal-body">
      <div id="deleteContent"></div>
      <div class="form-actions">
        <button class="btn btn-danger" id="confirmDelete">
          <i class="fas fa-trash"></i> Confirm Delete
        </button>
        <button class="btn btn-secondary" onclick="closeModal('deleteModal')">Cancel</button>
      </div>
    </div>
  </div>
</div>

<!-- Export Modal -->
<div class="modal" id="exportModal">
  <div class="modal-content">
    <div class="modal-header">
      <h3><i class="fas fa-download"></i> Export Chats</h3>
      <button class="close-btn" onclick="closeModal('exportModal')">
        <i class="fas fa-times"></i>
      </button>
    </div>
    <div class="modal-body">
      <div class="export-options">
        <div class="form-group">
          <label>Export Format</label>
          <select id="exportFormat" class="form-control">
            <option value="csv">CSV</option>
            <option value="json">JSON</option>
          </select>
        </div>
        
        <div class="form-group">
          <label>Include Data</label>
          <div class="checkbox-group">
            <label class="checkbox-label">
              <input type="checkbox" id="includeConversation" checked>
              <span>Full Conversations</span>
            </label>
            <label class="checkbox-label">
              <input type="checkbox" id="includeMetadata" checked>
              <span>Metadata</span>
            </label>
            <label class="checkbox-label">
              <input type="checkbox" id="includeUserInfo">
              <span>User Information</span>
            </label>
          </div>
        </div>
        
        <div class="export-selection">
          <div class="selection-info" id="exportSelectionInfo"></div>
        </div>
        
        <div class="form-actions">
          <button class="btn btn-primary" id="downloadChats">
            <i class="fas fa-download"></i> Download
          </button>
          <button class="btn btn-secondary" onclick="closeModal('exportModal')">Cancel</button>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
class ChatManager {
  constructor() {
    this.selectedChats = new Set();
    this.currentView = 'table';
    this.chatData = {{{jsonStringify chats}}};
    this.init();
  }

  init() {
    this.setupEventListeners();
    this.calculateStats();
    this.updateBulkActions();
  }

  setupEventListeners() {
    // Date range selector
    document.getElementById('dateRangeSelect').addEventListener('change', (e) => {
      const customRange = document.getElementById('customDateRange');
      customRange.style.display = e.target.value === 'custom' ? 'block' : 'none';
    });

    // Select all checkbox
    document.getElementById('selectAllChats').addEventListener('change', (e) => {
      this.selectAll(e.target.checked);
    });

    // Individual chat checkboxes
    document.querySelectorAll('.chat-checkbox, .chat-checkbox-card').forEach(checkbox => {
      checkbox.addEventListener('change', (e) => {
        this.toggleChat(parseInt(e.target.value), e.target.checked);
      });
    });

    // View toggle buttons
    document.getElementById('tableViewBtn').addEventListener('click', () => {
      this.switchView('table');
    });

    document.getElementById('cardsViewBtn').addEventListener('click', () => {
      this.switchView('cards');
    });

    // Bulk action buttons
    document.getElementById('bulkExportBtn').addEventListener('click', () => {
      this.openExportModal();
    });

    document.getElementById('bulkDeleteBtn').addEventListener('click', () => {
      this.confirmBulkDelete();
    });

    // Modal actions
    document.getElementById('confirmDelete').addEventListener('click', () => {
      this.executeDelete();
    });

    document.getElementById('downloadChats').addEventListener('click', () => {
      this.downloadExport();
    });

    this.setupViewSync();
  }

  setupViewSync() {
    // Sync checkboxes between table and card views
    const syncCheckboxes = () => {
      const tableCheckboxes = document.querySelectorAll('.chat-checkbox');
      const cardCheckboxes = document.querySelectorAll('.chat-checkbox-card');
      
      tableCheckboxes.forEach(checkbox => {
        const correspondingCard = Array.from(cardCheckboxes).find(
          cb => cb.value === checkbox.value
        );
        if (correspondingCard) {
          correspondingCard.checked = checkbox.checked;
        }
      });
    };

    document.querySelectorAll('.chat-checkbox').forEach(checkbox => {
      checkbox.addEventListener('change', syncCheckboxes);
    });

    document.querySelectorAll('.chat-checkbox-card').forEach(checkbox => {
      checkbox.addEventListener('change', () => {
        const correspondingTable = document.querySelector(
          `.chat-checkbox[value="${checkbox.value}"]`
        );
        if (correspondingTable) {
          correspondingTable.checked = checkbox.checked;
        }
        this.toggleChat(parseInt(checkbox.value), checkbox.checked);
      });
    });
  }

  switchView(view) {
    this.currentView = view;
    
    const tableView = document.getElementById('tableView');
    const cardsView = document.getElementById('cardsView');
    const tableBtn = document.getElementById('tableViewBtn');
    const cardsBtn = document.getElementById('cardsViewBtn');

    if (view === 'table') {
      tableView.classList.remove('hidden');
      cardsView.classList.add('hidden');
      tableBtn.classList.add('active');
      cardsBtn.classList.remove('active');
    } else {
      tableView.classList.add('hidden');
      cardsView.classList.remove('hidden');
      tableBtn.classList.remove('active');
      cardsBtn.classList.add('active');
    }
  }

  calculateStats() {
    if (this.chatData.length === 0) return;

    const totalMessages = this.chatData.reduce((sum, chat) => sum + (chat.message_count || 0), 0);
    const avgMessages = Math.round(totalMessages / this.chatData.length);
    const uniqueUsers = new Set(this.chatData.map(chat => chat.username)).size;

    document.getElementById('avgMessages').textContent = avgMessages;
    document.getElementById('uniqueUsers').textContent = uniqueUsers;
  }

  selectAll(checked) {
    document.querySelectorAll('.chat-checkbox, .chat-checkbox-card').forEach(checkbox => {
      checkbox.checked = checked;
      this.toggleChat(parseInt(checkbox.value), checked);
    });
  }

  toggleChat(chatId, selected) {
    if (selected) {
      this.selectedChats.add(chatId);
    } else {
      this.selectedChats.delete(chatId);
    }
    this.updateBulkActions();
  }

  updateBulkActions() {
    const count = this.selectedChats.size;
    document.getElementById('selectedChats').textContent = count;
    
    const bulkExportBtn = document.getElementById('bulkExportBtn');
    const bulkDeleteBtn = document.getElementById('bulkDeleteBtn');
    
    bulkExportBtn.disabled = count === 0;
    bulkDeleteBtn.disabled = count === 0;
  }

  openExportModal() {
    if (this.selectedChats.size === 0) {
      showNotification('Please select chats to export', 'warning');
      return;
    }

    const selectionInfo = document.getElementById('exportSelectionInfo');
    selectionInfo.innerHTML = `
      <div class="selection-summary">
        <h4>Export Selection</h4>
        <p><strong>${this.selectedChats.size}</strong> chats selected for export</p>
        <div class="selected-chat-ids">
          Chat IDs: ${Array.from(this.selectedChats).sort((a, b) => a - b).join(', ')}
        </div>
      </div>
    `;

    openModal('exportModal');
  }

  confirmBulkDelete() {
    if (this.selectedChats.size === 0) {
      showNotification('Please select chats to delete', 'warning');
      return;
    }

    const content = document.getElementById('deleteContent');
    content.innerHTML = `
      <div class="delete-warning">
        <p><strong>Warning:</strong> You are about to delete ${this.selectedChats.size} chat(s).</p>
        <p>This action cannot be undone.</p>
        <div class="delete-list">
          ${Array.from(this.selectedChats).sort((a, b) => a - b).map(id => 
            `<div class="delete-item">Chat #${id}</div>`
          ).join('')}
        </div>
      </div>
    `;

    openModal('deleteModal');
  }

  async executeDelete() {
    try {
      const response = await fetch('/admin/chats/bulk-delete', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chatIds: Array.from(this.selectedChats)
        })
      });

      const result = await response.json();

      if (result.success) {
        showNotification(`${this.selectedChats.size} chats deleted successfully`, 'success');
        closeModal('deleteModal');
        setTimeout(() => window.location.reload(), 1000);
      } else {
        throw new Error(result.message);
      }
    } catch (error) {
      showNotification('Failed to delete chats', 'error');
      console.error('Delete failed:', error);
    }
  }

  async downloadExport() {
    const format = document.getElementById('exportFormat').value;
    const includeConversation = document.getElementById('includeConversation').checked;
    const includeMetadata = document.getElementById('includeMetadata').checked;
    const includeUserInfo = document.getElementById('includeUserInfo').checked;

    try {
      const params = new URLSearchParams({
        format,
        includeConversation,
        includeMetadata,
        includeUserInfo,
        chatIds: Array.from(this.selectedChats).join(',')
      });

      const response = await fetch(`/admin/export/chats?${params}`);
      
      if (!response.ok) {
        throw new Error('Export failed');
      }

      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `chats_export.${format}`;
      document.body.appendChild(a);
      a.click();
      window.URL.revokeObjectURL(url);
      document.body.removeChild(a);

      showNotification('Export completed successfully', 'success');
      closeModal('exportModal');
    } catch (error) {
      showNotification('Export failed', 'error');
      console.error('Export failed:', error);
    }
  }
}

// Global functions
function openModal(modalId) {
  document.getElementById(modalId).classList.add('active');
}

function closeModal(modalId) {
  document.getElementById(modalId).classList.remove('active');
}

function showNotification(message, type = 'info') {
  const notification = document.createElement('div');
  notification.className = `notification ${type}`;
  notification.textContent = message;
  notification.style.cssText = `
    position: fixed;
    top: 20px;
    right: 20px;
    padding: 12px 24px;
    border-radius: 8px;
    color: white;
    font-weight: 500;
    z-index: 10000;
    opacity: 0;
    transform: translateX(100px);
    transition: all 0.3s ease;
  `;

  const colors = {
    success: '#10b981',
    error: '#ef4444',
    warning: '#f59e0b',
    info: '#3b82f6'
  };

  notification.style.backgroundColor = colors[type] || colors.info;
  document.body.appendChild(notification);

  setTimeout(() => {
    notification.style.opacity = '1';
    notification.style.transform = 'translateX(0)';
  }, 100);

  setTimeout(() => {
    notification.style.opacity = '0';
    notification.style.transform = 'translateX(100px)';
    setTimeout(() => document.body.removeChild(notification), 300);
  }, 3000);
}

function deleteChat(chatId) {
  window.chatManager.selectedChats.clear();
  window.chatManager.selectedChats.add(chatId);
  window.chatManager.confirmBulkDelete();
}

function changePageSize(pageSize) {
  const url = new URL(window.location);
  url.searchParams.set('pageSize', pageSize);
  url.searchParams.set('page', '1');
  window.location.href = url.toString();
}

// Initialize when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  window.chatManager = new ChatManager();
});
</script>

<style>
/* Enhanced Chat Management Styles */
.control-panel {
  display: grid;
  grid-template-columns: 2fr 1fr;
  gap: 2rem;
  margin-bottom: 2rem;
}

.control-section {
  background: white;
  padding: 2rem;
  border-radius: 12px;
  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
  border: 1px solid #e5e7eb;
  transition: all 0.3s ease;
}

.control-section:hover {
  box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
  transform: translateY(-2px);
}

.control-section h3 {
  margin: 0 0 1.5rem 0;
  color: #1f2937;
  font-size: 1.125rem;
  font-weight: 600;
  display: flex;
  align-items: center;
  gap: 0.5rem;
  padding-bottom: 0.75rem;
  border-bottom: 2px solid #f3f4f6;
}

.control-section h3 i {
  color: #4f46e5;
  font-size: 1.2rem;
}

.search-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 1.5rem;
  margin-bottom: 1.5rem;
}

.search-field {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

.search-field label {
  font-weight: 500;
  color: #374151;
  font-size: 0.875rem;
}

.form-control {
  padding: 0.75rem 1rem;
  border: 2px solid #e5e7eb;
  border-radius: 8px;
  font-size: 0.875rem;
  transition: all 0.2s ease;
  background: white;
}

.form-control:focus {
  outline: none;
  border-color: #4f46e5;
  box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.1);
}

.form-control:hover {
  border-color: #d1d5db;
}

.input-group {
  position: relative;
}

.input-group i {
  position: absolute;
  right: 1rem;
  top: 50%;
  transform: translateY(-50%);
  color: #6b7280;
  font-size: 0.875rem;
}

.date-range-inputs {
  grid-column: span 2;
  background: #f8fafc;
  padding: 1rem;
  border-radius: 8px;
  border: 1px solid #e5e7eb;
}

.date-range-row {
  display: flex;
  align-items: center;
  gap: 1rem;
}

.date-range-row input {
  flex: 1;
  margin: 0;
}

.date-range-row span {
  color: #6b7280;
  font-size: 0.875rem;
  font-weight: 500;
}

.search-actions {
  display: flex;
  gap: 1rem;
  justify-content: flex-end;
  padding-top: 1rem;
  border-top: 1px solid #f3f4f6;
}

.btn {
  padding: 0.75rem 1.5rem;
  border-radius: 8px;
  font-size: 0.875rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease;
  text-decoration: none;
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
  border: 1px solid transparent;
}

.btn-primary {
  background: #4f46e5;
  color: white;
  border-color: #4f46e5;
}

.btn-primary:hover {
  background: #4338ca;
  transform: translateY(-1px);
  box-shadow: 0 4px 12px rgba(79, 70, 229, 0.4);
}

.btn-secondary {
  background: #f8fafc;
  color: #374151;
  border-color: #e5e7eb;
}

.btn-secondary:hover {
  background: #f1f5f9;
  border-color: #d1d5db;
}

.btn-outline {
  background: white;
  color: #4f46e5;
  border-color: #4f46e5;
}

.btn-outline:hover {
  background: #4f46e5;
  color: white;
}

.btn-outline:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.btn-danger {
  background: #ef4444;
  color: white;
  border-color: #ef4444;
}

.btn-danger:hover {
  background: #dc2626;
  transform: translateY(-1px);
  box-shadow: 0 4px 12px rgba(239, 68, 68, 0.4);
}

.btn-danger:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.view-controls {
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
}

.view-toggle {
  display: flex;
  background: #f8fafc;
  border-radius: 8px;
  padding: 0.25rem;
  border: 1px solid #e5e7eb;
}

.view-btn {
  flex: 1;
  padding: 0.75rem 1rem;
  border: none;
  background: transparent;
  border-radius: 6px;
  cursor: pointer;
  transition: all 0.2s ease;
  font-size: 0.875rem;
  font-weight: 500;
  color: #6b7280;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
}

.view-btn.active {
  background: white;
  color: #4f46e5;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.view-btn:hover:not(.active) {
  color: #374151;
}

.bulk-controls {
  display: flex;
  flex-direction: column;
  gap: 0.75rem;
}

.chat-cards-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
  gap: 1.5rem;
  padding: 1.5rem;
}

.chat-card {
  background: white;
  border: 1px solid #e5e7eb;
  border-radius: 12px;
  overflow: hidden;
  transition: all 0.3s ease;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
}

.chat-card:hover {
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
  transform: translateY(-4px);
  border-color: #4f46e5;
}

.chat-card-header {
  padding: 1.25rem;
  background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
  border-bottom: 1px solid #e5e7eb;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.chat-card-id {
  font-weight: 600;
  color: #4f46e5;
  font-size: 0.875rem;
}

.chat-card-date {
  font-size: 0.75rem;
  color: #6b7280;
  background: white;
  padding: 0.25rem 0.5rem;
  border-radius: 4px;
  border: 1px solid #e5e7eb;
}

.chat-card-body {
  padding: 1.25rem;
}

.chat-card-user {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  margin-bottom: 0.75rem;
  font-weight: 500;
  color: #1f2937;
}

.chat-card-user i {
  color: #6b7280;
}

.chat-card-meta {
  display: flex;
  gap: 0.5rem;
  margin-bottom: 1rem;
  flex-wrap: wrap;
}

.model-badge {
  background: linear-gradient(135deg, #4f46e5 0%, #7c3aed 100%);
  color: white;
  padding: 0.25rem 0.75rem;
  border-radius: 6px;
  font-size: 0.75rem;
  font-weight: 500;
  box-shadow: 0 2px 4px rgba(79, 70, 229, 0.2);
}

.temp-badge {
  background: linear-gradient(135deg, #f59e0b 0%, #f97316 100%);
  color: white;
  padding: 0.25rem 0.5rem;
  border-radius: 6px;
  font-size: 0.75rem;
  font-weight: 500;
  box-shadow: 0 2px 4px rgba(245, 158, 11, 0.2);
}

.count-badge {
  background: linear-gradient(135deg, #10b981 0%, #059669 100%);
  color: white;
  padding: 0.25rem 0.5rem;
  border-radius: 6px;
  font-size: 0.75rem;
  font-weight: 500;
  box-shadow: 0 2px 4px rgba(16, 185, 129, 0.2);
}

.chat-card-preview {
  color: #6b7280;
  font-size: 0.875rem;
  line-height: 1.5;
  background: #f8fafc;
  padding: 0.75rem;
  border-radius: 6px;
  border-left: 3px solid #4f46e5;
}

.chat-card-footer {
  padding: 1.25rem;
  background: #f8fafc;
  border-top: 1px solid #e5e7eb;
}

.card-actions {
  display: flex;
  gap: 0.5rem;
  justify-content: space-between;
}

.card-action-btn {
  padding: 0.5rem 1rem;
  border: 1px solid #e5e7eb;
  border-radius: 6px;
  text-decoration: none;
  font-size: 0.875rem;
  font-weight: 500;
  transition: all 0.2s ease;
  display: flex;
  align-items: center;
  gap: 0.5rem;
  cursor: pointer;
}

.card-action-btn.primary {
  background: #4f46e5;
  color: white;
  border-color: #4f46e5;
}

.card-action-btn.primary:hover {
  background: #4338ca;
  transform: translateY(-1px);
  box-shadow: 0 4px 12px rgba(79, 70, 229, 0.3);
}

.card-action-btn.secondary {
  background: white;
  color: #6b7280;
  border-color: #d1d5db;
}

.card-action-btn.secondary:hover {
  background: #f3f4f6;
  color: #374151;
  border-color: #9ca3af;
}

.card-action-btn.danger {
  background: white;
  color: #ef4444;
  border-color: #ef4444;
}

.card-action-btn.danger:hover {
  background: #ef4444;
  color: white;
  transform: translateY(-1px);
  box-shadow: 0 4px 12px rgba(239, 68, 68, 0.3);
}

.preview-col {
  max-width: 250px;
}

.message-preview {
  color: #6b7280;
  font-size: 0.875rem;
  line-height: 1.4;
  overflow: hidden;
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  text-overflow: ellipsis;
}

.chat-id {
  font-weight: 600;
  color: #4f46e5;
  font-size: 0.875rem;
}

.data-table tbody tr:hover {
  background: #f8fafc;
  transform: translateY(-1px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
}

.action-btn {
  width: 36px;
  height: 36px;
  border: 1px solid #e5e7eb;
  background: white;
  border-radius: 8px;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  transition: all 0.2s ease;
  color: #6b7280;
  text-decoration: none;
}

.action-btn:hover {
  background: #f3f4f6;
  transform: translateY(-1px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.action-btn.view:hover {
  border-color: #4f46e5;
  color: #4f46e5;
  background: rgba(79, 70, 229, 0.1);
}

.action-btn.edit:hover {
  border-color: #f59e0b;
  color: #f59e0b;
  background: rgba(245, 158, 11, 0.1);
}

.action-btn.delete:hover {
  border-color: #ef4444;
  color: #ef4444;
  background: rgba(239, 68, 68, 0.1);
}

.hidden {
  display: none !important;
}

.notification {
  position: fixed;
  top: 20px;
  right: 20px;
  padding: 1rem 1.5rem;
  border-radius: 8px;
  color: white;
  font-weight: 500;
  z-index: 10000;
  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
  backdrop-filter: blur(10px);
}

.notification.success {
  background: linear-gradient(135deg, #10b981 0%, #059669 100%);
}

.notification.error {
  background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
}

.notification.warning {
  background: linear-gradient(135deg, #f59e0b 0%, #f97316 100%);
}

.notification.info {
  background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
}

@media (max-width: 1024px) {
  .control-panel {
    grid-template-columns: 1fr;
  }
  
  .search-grid {
    grid-template-columns: 1fr;
  }
  
  .date-range-inputs {
    grid-column: span 1;
  }
}

@media (max-width: 768px) {
  .control-section {
    padding: 1.5rem;
  }
  
  .search-actions {
    flex-direction: column;
  }
  
  .view-controls {
    flex-direction: row;
    justify-content: space-between;
  }
  
  .bulk-controls {
    flex-direction: row;
    gap: 0.5rem;
  }
  
  .chat-cards-grid {
    grid-template-columns: 1fr;
    padding: 1rem;
  }
  
  .date-range-row {
    flex-direction: column;
    gap: 0.5rem;
  }
  
  .date-range-row span {
    align-self: center;
  }
}
</style>