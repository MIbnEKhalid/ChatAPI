name: Auto Merge Test Branch to Main

on:
  push:
    branches:
      - test # Trigger on push to the test branch only
    paths:
      - 'test/*' # Trigger only when files in the test branch are updated

jobs:
  automerge:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check for merge to test
        id: check_merge
        run: |
          # Check if a merge was just made into the test branch
          git fetch origin
          target_branch=$(git rev-parse --abbrev-ref HEAD)
          if [[ "$target_branch" == "test" ]]; then
            echo "::set-output name=merge_to_test::true"
          else
            echo "::set-output name=merge_to_test::false"
          fi

      - name: Check for Conflicts
        if: steps.check_merge.outputs.merge_to_test == 'true'
        run: |
          git fetch origin
          git diff --check origin/main test

      - name: Merge Test into Main
        if: steps.check_merge.outputs.merge_to_test == 'true' && steps.Check_for_Conflicts.outcome == 'success'
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git checkout main
          git merge --no-ff -m "Automatically merged test branch (from merge)" test
          # Check for conflicts before pushing
          git status

      - name: Resolve Conflicts (Optional but crucial)
        if: steps.check_merge.outputs.merge_to_test == 'true' && steps.Check_for_Conflicts.outcome == 'failure'
        run: |
          echo "Merge conflict detected! Please resolve conflicts manually."
          # Insert code to attempt conflict resolution, if possible
          # Using a tool like `jq` or `sed` or another more advanced method
          # Example for a simple conflict on a JSON file
          # (replace with your appropriate logic)

          # if [[ $(git status | grep "error") ]]; then
          #   echo "Conflicts still exist after conflict handling!"
          #   exit 1
          # fi


      - name: Commit and Push Changes
        if: steps.check_merge.outputs.merge_to_test == 'true' && steps.Check_for_Conflicts.outcome == 'success'
        run: |
          git push origin main

